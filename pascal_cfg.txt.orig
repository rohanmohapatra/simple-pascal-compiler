<<<<<<< HEAD
<program> -> <program_heading> <block> .

<program_heading> -> program <identifier>
=======
S -> prog_header_block.newlineOrNo.decl_block.newlineOrNo.exec_block

newlineOrNo -> <new line> | EPSILON

prog_header_block ->  pgm_sub_block.newlineOrNo.uses_sub_block
pgm_sub_block -> "program ".id.";"
uses_sub_block -> EPSILON | "uses ".id."," | "uses ".id.";".newlineOrNo
>>>>>>> master

<block> ->  <uses_block><constant_block>
            <type_block><variable_block>
            <execution_block>
            
<uses_block> -> uses <identifier> ; | empty 

<constant_block> -> const<newline> <const_definition>
<const_defnition> -> <identifier> = <constant>
<constant> ->   integer 
                | boolean 
                | string
                
                
<type_block> -> type <newline> <type_definition> | empty 
<type_definition> -> <identifier>  = <type>

<variable_block> -> empty | var <new line> <decl_stmts>
<decl_stmts> -> <decl_stmt> <new line> <decl_stmts> | <decl_stmt>
<decl_stmt> -> <identifier> : <type> ;


<execution_block> -> begin <newline> <exec_body> <newline> end .
<exec_body> -> <assignment_stmts> <newline> <exec_body>
                | <if_statement> <newline> <exec_body>
                | <while_statement> <newline> <exec_body>
                | empty

<assignment_stmts> -> <assignment_stmts> <newline> 
                      <assignment_statement> 
                     | <assignment_stmt>
                     
<assigment_stmt> -> <identifier> : = <value>


<if_statement> -> if <cond_stmt> then <newline> <exec_body> 
                    | if <cond_stmt> then <newline> <exec_body> 
                      else <newline> <exec_body>
                      


<while_statement> -> while <cond_stmt> do <newline> <exec_body>


<cond_stmt> -> <expression> 
                | <expression> <operator> <expression>
<operator> -> && | || | < | <= | >= | > | = | == | + | - | * | / 
                <expression> -> <identifier> | <value>
                | ( <expression> ) 
                | <expression> <operator> <expression>
                

<type> -> character | integer | real | boolean | string