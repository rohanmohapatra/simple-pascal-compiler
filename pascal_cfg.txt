S -> prog_header_block.newlineOrNo.decl_block.newlineOrNo.exec_block

newlineOrNo -> <new line> | EPSILON

prog_header_block ->  pgm_sub_block.newlineOrNo.uses_sub_block
pgm_sub_block -> "program ".id.";"
uses_sub_block -> EPSILON | "uses ".id.";".newlineOrNo.uses_block

decl_block -> glob_const_sub_block.<new line>.glob_var_sub_block
glob_const_sub_block -> EPSILON //TO COMPLETE 
glob_var_sub_block -> EPSILON | "var".<new line>.decl_stmts
decl_stmts -> decl_stmt.<new line>.decl_stmts | decl_stmt
decl_stmt -> ids." : ".type.";"

exec_block -> "begin".<new line>.exec_body.<new line>."end"
exec_body -> assign_stmts.<new line>.exec_body | if_stmt.<new line>.exec_body | while_stmt.<new line>.exec_body i| | EPSILON

assign_stmts -> assign_stmts.<new line>.assign_stmt | assign_stmt
assign_stmt -> id." := ".value //VALUE IS LIKE NUMBER OR STRING ETC --PLS CHECK UP

if_stmt -> "if ".cond_stmt." then".<new line>exec_body | "if ".cond_stmt." then".<new line>exec_body."else".<new line>.exec_body

while_stmt -> "while ".cond_stmt." do".<new line>.exec_body 

cond_stmt -> expr | expr.op.expr
op -> "&&" | "||" | "<" | "<=" | ">=" | ">" | "=" | "==" | "+" | "-" | "*" | "/"expr -> id | value | "(".expr.")" | expr.op.expr

value -> char_value | int_value | real_value | bool_value | str_value
char_value <- "." // DONT KNOW HOW TO SAY ANY CHARACTER
int_value <- 		//HAVE TO COMPLETE
real_value <- 
bool_value <- 
str_value <- 

ids -> ids.",".id | id

id -> "a..zA..Z"."a-zA-Z0-9"* //to complete and review

type -> "Character" | "Integer" | "Real" | "Boolean" | "String" //restricting it to this and not including complex stuff like subrange and enums


