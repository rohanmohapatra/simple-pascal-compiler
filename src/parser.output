State 71 conflicts: 6 shift/reduce
State 125 conflicts: 1 shift/reduce
State 138 conflicts: 5 shift/reduce
State 188 conflicts: 20 shift/reduce
State 189 conflicts: 6 shift/reduce
State 205 conflicts: 5 shift/reduce
State 214 conflicts: 6 shift/reduce
State 222 conflicts: 1 shift/reduce
State 226 conflicts: 7 reduce/reduce
State 231 conflicts: 5 shift/reduce, 7 reduce/reduce


Grammar

    0 $accept: startPascal $end

    1 startPascal: program

    2 program: prog_heading block '.'

    3 prog_heading: T_PROGRAM T_IDENTIFIER ';'

    4 block: uses_block constant_block type_block variable_block function_and_procedure_block execution_block

    5 uses_block: T_USES T_IDENTIFIER more_libs ';'
    6           | epsilon

    7 more_libs: ',' T_IDENTIFIER more_libs
    8          | epsilon

    9 constant_block: T_CONST const_definition
   10               | epsilon

   11 const_definition: T_IDENTIFIER T_SINGLEEQ some_numeric_type ';' more_const_definition

   12 more_const_definition: T_IDENTIFIER T_SINGLEEQ some_numeric_type ';' more_const_definition
   13                      | epsilon

   14 type_block: T_TYPE type_definition
   15           | epsilon

   16 $@1: %empty

   17 $@2: %empty

   18 type_definition: T_IDENTIFIER $@1 more_type_identifiers T_SINGLEEQ T_DATATYPE $@2 ';' type_definition
   19                | epsilon

   20 variable_block: T_VAR variable_declaration
   21               | epsilon

   22 $@3: %empty

   23 variable_declaration: T_IDENTIFIER $@3 more_var_identifiers ':' data_type ';' variable_declaration
   24                     | epsilon

   25 data_type: T_DATATYPE
   26          | T_IDENTIFIER
   27          | T_ARRAY '[' T_INDEXTYPE ']' T_OF T_DATATYPE

   28 $@4: %empty

   29 more_type_identifiers: ',' T_IDENTIFIER $@4 more_type_identifiers
   30                      | epsilon

   31 $@5: %empty

   32 more_var_identifiers: ',' T_IDENTIFIER $@5 more_var_identifiers
   33                     | epsilon

   34 function_and_procedure_block: function_block function_and_procedure_block
   35                             | procedure_block function_and_procedure_block
   36                             | epsilon

   37 $@6: %empty

   38 procedure_block: T_PROCEDURE T_IDENTIFIER $@6 ';' block ';'

   39 $@7: %empty

   40 procedure_block: T_PROCEDURE T_IDENTIFIER $@7 '(' param_list ')' ';' block ';'

   41 param_list: T_IDENTIFIER ':' T_DATATYPE
   42           | T_IDENTIFIER ':' T_DATATYPE ';' param_list
   43           | epsilon

   44 $@8: %empty

   45 function_block: T_FUNCTION T_IDENTIFIER $@8 ':' T_DATATYPE ';' block ';'

   46 $@9: %empty

   47 function_block: T_FUNCTION T_IDENTIFIER $@9 '(' function_param_list ')' ':' T_DATATYPE ';' block ';'

   48 $@10: %empty

   49 $@11: %empty

   50 function_param_list: T_IDENTIFIER $@10 more_func_identifiers ':' T_DATATYPE $@11 function_param_continue

   51 function_param_continue: epsilon
   52                        | ';' function_param_list

   53 $@12: %empty

   54 more_func_identifiers: ',' T_IDENTIFIER $@12 more_func_identifiers
   55                      | epsilon

   56 execution_block: T_BEGIN execution_body T_END

   57 execution_body: execution_body statements
   58               | epsilon

   59 statements: assignment_statements
   60           | print_statements
   61           | structured_statements

   62 structured_statements: conditional_statement
   63                      | repetitive_statement

   64 conditional_statement: T_IF '(' boolean_expression ')' T_THEN execution_body if_then_follow

   65 if_then_follow: else_if_block
   66               | else_block
   67               | epsilon

   68 else_if_block: T_ELSE conditional_statement

   69 else_block: T_ELSE execution_body

   70 repetitive_statement: for_statement
   71                     | while_statement

   72 while_statement: T_WHILE expression T_DO statements

   73 for_statement: T_FOR T_IDENTIFIER T_ASOP for_list T_DO statements

   74 for_list: expression T_TO expression
   75         | expression T_DOWNTO expression

   76 print_statements: T_WRITELN '(' T_STRINGVAL ')' ';'

   77 assignment_statements: assignment_statement ';' assignment_statements
   78                      | epsilon

   79 $@13: %empty

   80 assignment_statement: T_IDENTIFIER $@13 assignment_ops expression

   81 value: T_INTVAL
   82      | T_FLOATVAL
   83      | T_BOOLVAL
   84      | T_STRINGVAL

   85 expression: T_IDENTIFIER
   86           | value
   87           | '(' expression ')'
   88           | expression operator expression

   89 boolean_expression: expression relational_ops expression

   90 operator: arithmetic_ops
   91         | relational_ops
   92         | boolean_ops
   93         | bitwise_ops

   94 assignment_ops: T_ASOP
   95               | T_AS_PE
   96               | T_AS_SE
   97               | T_AS_MULE
   98               | T_AS_DIVE

   99 arithmetic_ops: '+'
  100               | '*'
  101               | '/'
  102               | '-'
  103               | '%'

  104 relational_ops: T_SINGLEEQ
  105               | '>'
  106               | '<'
  107               | T_REL_LE
  108               | T_REL_GE
  109               | T_REL_NE

  110 boolean_ops: T_BOOL_AND
  111            | T_BOOL_OR
  112            | T_BOOL_NOT

  113 bitwise_ops: '&'
  114            | '|'
  115            | '~'
  116            | '!'
  117            | T_BIT_LS
  118            | T_BIT_RS

  119 some_numeric_type: T_INTVAL
  120                  | T_FLOATVAL

  121 epsilon: %empty


Terminals, with rules where they appear

$end (0) 0
'!' (33) 116
'%' (37) 103
'&' (38) 113
'(' (40) 40 47 64 76 87
')' (41) 40 47 64 76 87
'*' (42) 100
'+' (43) 99
',' (44) 7 29 32 54
'-' (45) 102
'.' (46) 2
'/' (47) 101
':' (58) 23 41 42 45 47 50
';' (59) 3 5 11 12 18 23 38 40 42 45 47 52 76 77
'<' (60) 106
'>' (62) 105
'[' (91) 27
']' (93) 27
'|' (124) 114
'~' (126) 115
error (256)
T_USES (258) 5
T_WHILE (259) 72
T_PROGRAM (260) 3
T_VAR (261) 20
T_TYPE (262) 14
T_IF (263) 64
T_THEN (264) 64
T_ELSE (265) 68 69
T_BEGIN (266) 56
T_END (267) 56
T_CONST (268) 9
T_WRITELN (269) 76
T_PROCEDURE (270) 38 40
T_FUNCTION (271) 45 47
T_FOR (272) 73
T_DO (273) 72 73
T_TO (274) 74
T_OF (275) 27
T_DOWNTO (276) 75
T_BOOL_AND (277) 110
T_BOOL_OR (278) 111
T_BOOL_NOT (279) 112
T_REL_LE (280) 107
T_REL_GE (281) 108
T_REL_NE (282) 109
T_SINGLEEQ (283) 11 12 18 104
T_BIT_LS (284) 117
T_BIT_RS (285) 118
T_ASOP (286) 73 94
T_AS_PE (287) 95
T_AS_SE (288) 96
T_AS_MULE (289) 97
T_AS_DIVE (290) 98
T_ARRAY (291) 27
T_INDEXTYPE (292) 27
T_IDENTIFIER (293) 3 5 7 11 12 18 23 26 29 32 38 40 41 42 45 47 50
    54 73 80 85
T_DATATYPE (294) 18 25 27 41 42 45 47 50
T_INTVAL (295) 81 119
T_FLOATVAL (296) 82 120
T_BOOLVAL (297) 83
T_STRINGVAL (298) 76 84


Nonterminals, with rules where they appear

$accept (63)
    on left: 0
startPascal (64)
    on left: 1, on right: 0
program (65)
    on left: 2, on right: 1
prog_heading (66)
    on left: 3, on right: 2
block (67)
    on left: 4, on right: 2 38 40 45 47
uses_block (68)
    on left: 5 6, on right: 4
more_libs (69)
    on left: 7 8, on right: 5 7
constant_block (70)
    on left: 9 10, on right: 4
const_definition (71)
    on left: 11, on right: 9
more_const_definition (72)
    on left: 12 13, on right: 11 12
type_block (73)
    on left: 14 15, on right: 4
type_definition (74)
    on left: 18 19, on right: 14 18
$@1 (75)
    on left: 16, on right: 18
$@2 (76)
    on left: 17, on right: 18
variable_block (77)
    on left: 20 21, on right: 4
variable_declaration (78)
    on left: 23 24, on right: 20 23
$@3 (79)
    on left: 22, on right: 23
data_type (80)
    on left: 25 26 27, on right: 23
more_type_identifiers (81)
    on left: 29 30, on right: 18 29
$@4 (82)
    on left: 28, on right: 29
more_var_identifiers (83)
    on left: 32 33, on right: 23 32
$@5 (84)
    on left: 31, on right: 32
function_and_procedure_block (85)
    on left: 34 35 36, on right: 4 34 35
procedure_block (86)
    on left: 38 40, on right: 35
$@6 (87)
    on left: 37, on right: 38
$@7 (88)
    on left: 39, on right: 40
param_list (89)
    on left: 41 42 43, on right: 40 42
function_block (90)
    on left: 45 47, on right: 34
$@8 (91)
    on left: 44, on right: 45
$@9 (92)
    on left: 46, on right: 47
function_param_list (93)
    on left: 50, on right: 47 52
$@10 (94)
    on left: 48, on right: 50
$@11 (95)
    on left: 49, on right: 50
function_param_continue (96)
    on left: 51 52, on right: 50
more_func_identifiers (97)
    on left: 54 55, on right: 50 54
$@12 (98)
    on left: 53, on right: 54
execution_block (99)
    on left: 56, on right: 4
execution_body (100)
    on left: 57 58, on right: 56 57 64 69
statements (101)
    on left: 59 60 61, on right: 57 72 73
structured_statements (102)
    on left: 62 63, on right: 61
conditional_statement (103)
    on left: 64, on right: 62 68
if_then_follow (104)
    on left: 65 66 67, on right: 64
else_if_block (105)
    on left: 68, on right: 65
else_block (106)
    on left: 69, on right: 66
repetitive_statement (107)
    on left: 70 71, on right: 63
while_statement (108)
    on left: 72, on right: 71
for_statement (109)
    on left: 73, on right: 70
for_list (110)
    on left: 74 75, on right: 73
print_statements (111)
    on left: 76, on right: 60
assignment_statements (112)
    on left: 77 78, on right: 59 77
assignment_statement (113)
    on left: 80, on right: 77
$@13 (114)
    on left: 79, on right: 80
value (115)
    on left: 81 82 83 84, on right: 86
expression (116)
    on left: 85 86 87 88, on right: 72 74 75 80 87 88 89
boolean_expression (117)
    on left: 89, on right: 64
operator (118)
    on left: 90 91 92 93, on right: 88
assignment_ops (119)
    on left: 94 95 96 97 98, on right: 80
arithmetic_ops (120)
    on left: 99 100 101 102 103, on right: 90
relational_ops (121)
    on left: 104 105 106 107 108 109, on right: 89 91
boolean_ops (122)
    on left: 110 111 112, on right: 92
bitwise_ops (123)
    on left: 113 114 115 116 117 118, on right: 93
some_numeric_type (124)
    on left: 119 120, on right: 11 12
epsilon (125)
    on left: 121, on right: 6 8 10 13 15 19 21 24 30 33 36 43 51 55
    58 67 78


State 0

    0 $accept: . startPascal $end

    T_PROGRAM  shift, and go to state 1

    startPascal   go to state 2
    program       go to state 3
    prog_heading  go to state 4


State 1

    3 prog_heading: T_PROGRAM . T_IDENTIFIER ';'

    T_IDENTIFIER  shift, and go to state 5


State 2

    0 $accept: startPascal . $end

    $end  shift, and go to state 6


State 3

    1 startPascal: program .

    $default  reduce using rule 1 (startPascal)


State 4

    2 program: prog_heading . block '.'

    T_USES  shift, and go to state 7

    $default  reduce using rule 121 (epsilon)

    block       go to state 8
    uses_block  go to state 9
    epsilon     go to state 10


State 5

    3 prog_heading: T_PROGRAM T_IDENTIFIER . ';'

    ';'  shift, and go to state 11


State 6

    0 $accept: startPascal $end .

    $default  accept


State 7

    5 uses_block: T_USES . T_IDENTIFIER more_libs ';'

    T_IDENTIFIER  shift, and go to state 12


State 8

    2 program: prog_heading block . '.'

    '.'  shift, and go to state 13


State 9

    4 block: uses_block . constant_block type_block variable_block function_and_procedure_block execution_block

    T_CONST  shift, and go to state 14

    $default  reduce using rule 121 (epsilon)

    constant_block  go to state 15
    epsilon         go to state 16


State 10

    6 uses_block: epsilon .

    $default  reduce using rule 6 (uses_block)


State 11

    3 prog_heading: T_PROGRAM T_IDENTIFIER ';' .

    $default  reduce using rule 3 (prog_heading)


State 12

    5 uses_block: T_USES T_IDENTIFIER . more_libs ';'

    ','  shift, and go to state 17

    $default  reduce using rule 121 (epsilon)

    more_libs  go to state 18
    epsilon    go to state 19


State 13

    2 program: prog_heading block '.' .

    $default  reduce using rule 2 (program)


State 14

    9 constant_block: T_CONST . const_definition

    T_IDENTIFIER  shift, and go to state 20

    const_definition  go to state 21


State 15

    4 block: uses_block constant_block . type_block variable_block function_and_procedure_block execution_block

    T_TYPE  shift, and go to state 22

    $default  reduce using rule 121 (epsilon)

    type_block  go to state 23
    epsilon     go to state 24


State 16

   10 constant_block: epsilon .

    $default  reduce using rule 10 (constant_block)


State 17

    7 more_libs: ',' . T_IDENTIFIER more_libs

    T_IDENTIFIER  shift, and go to state 25


State 18

    5 uses_block: T_USES T_IDENTIFIER more_libs . ';'

    ';'  shift, and go to state 26


State 19

    8 more_libs: epsilon .

    $default  reduce using rule 8 (more_libs)


State 20

   11 const_definition: T_IDENTIFIER . T_SINGLEEQ some_numeric_type ';' more_const_definition

    T_SINGLEEQ  shift, and go to state 27


State 21

    9 constant_block: T_CONST const_definition .

    $default  reduce using rule 9 (constant_block)


State 22

   14 type_block: T_TYPE . type_definition

    T_IDENTIFIER  shift, and go to state 28

    $default  reduce using rule 121 (epsilon)

    type_definition  go to state 29
    epsilon          go to state 30


State 23

    4 block: uses_block constant_block type_block . variable_block function_and_procedure_block execution_block

    T_VAR  shift, and go to state 31

    $default  reduce using rule 121 (epsilon)

    variable_block  go to state 32
    epsilon         go to state 33


State 24

   15 type_block: epsilon .

    $default  reduce using rule 15 (type_block)


State 25

    7 more_libs: ',' T_IDENTIFIER . more_libs

    ','  shift, and go to state 17

    $default  reduce using rule 121 (epsilon)

    more_libs  go to state 34
    epsilon    go to state 19


State 26

    5 uses_block: T_USES T_IDENTIFIER more_libs ';' .

    $default  reduce using rule 5 (uses_block)


State 27

   11 const_definition: T_IDENTIFIER T_SINGLEEQ . some_numeric_type ';' more_const_definition

    T_INTVAL    shift, and go to state 35
    T_FLOATVAL  shift, and go to state 36

    some_numeric_type  go to state 37


State 28

   18 type_definition: T_IDENTIFIER . $@1 more_type_identifiers T_SINGLEEQ T_DATATYPE $@2 ';' type_definition

    $default  reduce using rule 16 ($@1)

    $@1  go to state 38


State 29

   14 type_block: T_TYPE type_definition .

    $default  reduce using rule 14 (type_block)


State 30

   19 type_definition: epsilon .

    $default  reduce using rule 19 (type_definition)


State 31

   20 variable_block: T_VAR . variable_declaration

    T_IDENTIFIER  shift, and go to state 39

    $default  reduce using rule 121 (epsilon)

    variable_declaration  go to state 40
    epsilon               go to state 41


State 32

    4 block: uses_block constant_block type_block variable_block . function_and_procedure_block execution_block

    T_PROCEDURE  shift, and go to state 42
    T_FUNCTION   shift, and go to state 43

    $default  reduce using rule 121 (epsilon)

    function_and_procedure_block  go to state 44
    procedure_block               go to state 45
    function_block                go to state 46
    epsilon                       go to state 47


State 33

   21 variable_block: epsilon .

    $default  reduce using rule 21 (variable_block)


State 34

    7 more_libs: ',' T_IDENTIFIER more_libs .

    $default  reduce using rule 7 (more_libs)


State 35

  119 some_numeric_type: T_INTVAL .

    $default  reduce using rule 119 (some_numeric_type)


State 36

  120 some_numeric_type: T_FLOATVAL .

    $default  reduce using rule 120 (some_numeric_type)


State 37

   11 const_definition: T_IDENTIFIER T_SINGLEEQ some_numeric_type . ';' more_const_definition

    ';'  shift, and go to state 48


State 38

   18 type_definition: T_IDENTIFIER $@1 . more_type_identifiers T_SINGLEEQ T_DATATYPE $@2 ';' type_definition

    ','  shift, and go to state 49

    $default  reduce using rule 121 (epsilon)

    more_type_identifiers  go to state 50
    epsilon                go to state 51


State 39

   23 variable_declaration: T_IDENTIFIER . $@3 more_var_identifiers ':' data_type ';' variable_declaration

    $default  reduce using rule 22 ($@3)

    $@3  go to state 52


State 40

   20 variable_block: T_VAR variable_declaration .

    $default  reduce using rule 20 (variable_block)


State 41

   24 variable_declaration: epsilon .

    $default  reduce using rule 24 (variable_declaration)


State 42

   38 procedure_block: T_PROCEDURE . T_IDENTIFIER $@6 ';' block ';'
   40                | T_PROCEDURE . T_IDENTIFIER $@7 '(' param_list ')' ';' block ';'

    T_IDENTIFIER  shift, and go to state 53


State 43

   45 function_block: T_FUNCTION . T_IDENTIFIER $@8 ':' T_DATATYPE ';' block ';'
   47               | T_FUNCTION . T_IDENTIFIER $@9 '(' function_param_list ')' ':' T_DATATYPE ';' block ';'

    T_IDENTIFIER  shift, and go to state 54


State 44

    4 block: uses_block constant_block type_block variable_block function_and_procedure_block . execution_block

    T_BEGIN  shift, and go to state 55

    execution_block  go to state 56


State 45

   35 function_and_procedure_block: procedure_block . function_and_procedure_block

    T_PROCEDURE  shift, and go to state 42
    T_FUNCTION   shift, and go to state 43

    $default  reduce using rule 121 (epsilon)

    function_and_procedure_block  go to state 57
    procedure_block               go to state 45
    function_block                go to state 46
    epsilon                       go to state 47


State 46

   34 function_and_procedure_block: function_block . function_and_procedure_block

    T_PROCEDURE  shift, and go to state 42
    T_FUNCTION   shift, and go to state 43

    $default  reduce using rule 121 (epsilon)

    function_and_procedure_block  go to state 58
    procedure_block               go to state 45
    function_block                go to state 46
    epsilon                       go to state 47


State 47

   36 function_and_procedure_block: epsilon .

    $default  reduce using rule 36 (function_and_procedure_block)


State 48

   11 const_definition: T_IDENTIFIER T_SINGLEEQ some_numeric_type ';' . more_const_definition

    T_IDENTIFIER  shift, and go to state 59

    $default  reduce using rule 121 (epsilon)

    more_const_definition  go to state 60
    epsilon                go to state 61


State 49

   29 more_type_identifiers: ',' . T_IDENTIFIER $@4 more_type_identifiers

    T_IDENTIFIER  shift, and go to state 62


State 50

   18 type_definition: T_IDENTIFIER $@1 more_type_identifiers . T_SINGLEEQ T_DATATYPE $@2 ';' type_definition

    T_SINGLEEQ  shift, and go to state 63


State 51

   30 more_type_identifiers: epsilon .

    $default  reduce using rule 30 (more_type_identifiers)


State 52

   23 variable_declaration: T_IDENTIFIER $@3 . more_var_identifiers ':' data_type ';' variable_declaration

    ','  shift, and go to state 64

    $default  reduce using rule 121 (epsilon)

    more_var_identifiers  go to state 65
    epsilon               go to state 66


State 53

   38 procedure_block: T_PROCEDURE T_IDENTIFIER . $@6 ';' block ';'
   40                | T_PROCEDURE T_IDENTIFIER . $@7 '(' param_list ')' ';' block ';'

    '('       reduce using rule 39 ($@7)
    $default  reduce using rule 37 ($@6)

    $@6  go to state 67
    $@7  go to state 68


State 54

   45 function_block: T_FUNCTION T_IDENTIFIER . $@8 ':' T_DATATYPE ';' block ';'
   47               | T_FUNCTION T_IDENTIFIER . $@9 '(' function_param_list ')' ':' T_DATATYPE ';' block ';'

    '('       reduce using rule 46 ($@9)
    $default  reduce using rule 44 ($@8)

    $@8  go to state 69
    $@9  go to state 70


State 55

   56 execution_block: T_BEGIN . execution_body T_END

    $default  reduce using rule 121 (epsilon)

    execution_body  go to state 71
    epsilon         go to state 72


State 56

    4 block: uses_block constant_block type_block variable_block function_and_procedure_block execution_block .

    $default  reduce using rule 4 (block)


State 57

   35 function_and_procedure_block: procedure_block function_and_procedure_block .

    $default  reduce using rule 35 (function_and_procedure_block)


State 58

   34 function_and_procedure_block: function_block function_and_procedure_block .

    $default  reduce using rule 34 (function_and_procedure_block)


State 59

   12 more_const_definition: T_IDENTIFIER . T_SINGLEEQ some_numeric_type ';' more_const_definition

    T_SINGLEEQ  shift, and go to state 73


State 60

   11 const_definition: T_IDENTIFIER T_SINGLEEQ some_numeric_type ';' more_const_definition .

    $default  reduce using rule 11 (const_definition)


State 61

   13 more_const_definition: epsilon .

    $default  reduce using rule 13 (more_const_definition)


State 62

   29 more_type_identifiers: ',' T_IDENTIFIER . $@4 more_type_identifiers

    $default  reduce using rule 28 ($@4)

    $@4  go to state 74


State 63

   18 type_definition: T_IDENTIFIER $@1 more_type_identifiers T_SINGLEEQ . T_DATATYPE $@2 ';' type_definition

    T_DATATYPE  shift, and go to state 75


State 64

   32 more_var_identifiers: ',' . T_IDENTIFIER $@5 more_var_identifiers

    T_IDENTIFIER  shift, and go to state 76


State 65

   23 variable_declaration: T_IDENTIFIER $@3 more_var_identifiers . ':' data_type ';' variable_declaration

    ':'  shift, and go to state 77


State 66

   33 more_var_identifiers: epsilon .

    $default  reduce using rule 33 (more_var_identifiers)


State 67

   38 procedure_block: T_PROCEDURE T_IDENTIFIER $@6 . ';' block ';'

    ';'  shift, and go to state 78


State 68

   40 procedure_block: T_PROCEDURE T_IDENTIFIER $@7 . '(' param_list ')' ';' block ';'

    '('  shift, and go to state 79


State 69

   45 function_block: T_FUNCTION T_IDENTIFIER $@8 . ':' T_DATATYPE ';' block ';'

    ':'  shift, and go to state 80


State 70

   47 function_block: T_FUNCTION T_IDENTIFIER $@9 . '(' function_param_list ')' ':' T_DATATYPE ';' block ';'

    '('  shift, and go to state 81


State 71

   56 execution_block: T_BEGIN execution_body . T_END
   57 execution_body: execution_body . statements

    T_WHILE       shift, and go to state 82
    T_IF          shift, and go to state 83
    T_END         shift, and go to state 84
    T_WRITELN     shift, and go to state 85
    T_FOR         shift, and go to state 86
    T_IDENTIFIER  shift, and go to state 87

    T_WHILE       [reduce using rule 121 (epsilon)]
    T_IF          [reduce using rule 121 (epsilon)]
    T_END         [reduce using rule 121 (epsilon)]
    T_WRITELN     [reduce using rule 121 (epsilon)]
    T_FOR         [reduce using rule 121 (epsilon)]
    T_IDENTIFIER  [reduce using rule 121 (epsilon)]

    statements             go to state 88
    structured_statements  go to state 89
    conditional_statement  go to state 90
    repetitive_statement   go to state 91
    while_statement        go to state 92
    for_statement          go to state 93
    print_statements       go to state 94
    assignment_statements  go to state 95
    assignment_statement   go to state 96
    epsilon                go to state 97


State 72

   58 execution_body: epsilon .

    $default  reduce using rule 58 (execution_body)


State 73

   12 more_const_definition: T_IDENTIFIER T_SINGLEEQ . some_numeric_type ';' more_const_definition

    T_INTVAL    shift, and go to state 35
    T_FLOATVAL  shift, and go to state 36

    some_numeric_type  go to state 98


State 74

   29 more_type_identifiers: ',' T_IDENTIFIER $@4 . more_type_identifiers

    ','  shift, and go to state 49

    $default  reduce using rule 121 (epsilon)

    more_type_identifiers  go to state 99
    epsilon                go to state 51


State 75

   18 type_definition: T_IDENTIFIER $@1 more_type_identifiers T_SINGLEEQ T_DATATYPE . $@2 ';' type_definition

    $default  reduce using rule 17 ($@2)

    $@2  go to state 100


State 76

   32 more_var_identifiers: ',' T_IDENTIFIER . $@5 more_var_identifiers

    $default  reduce using rule 31 ($@5)

    $@5  go to state 101


State 77

   23 variable_declaration: T_IDENTIFIER $@3 more_var_identifiers ':' . data_type ';' variable_declaration

    T_ARRAY       shift, and go to state 102
    T_IDENTIFIER  shift, and go to state 103
    T_DATATYPE    shift, and go to state 104

    data_type  go to state 105


State 78

   38 procedure_block: T_PROCEDURE T_IDENTIFIER $@6 ';' . block ';'

    T_USES  shift, and go to state 7

    $default  reduce using rule 121 (epsilon)

    block       go to state 106
    uses_block  go to state 9
    epsilon     go to state 10


State 79

   40 procedure_block: T_PROCEDURE T_IDENTIFIER $@7 '(' . param_list ')' ';' block ';'

    T_IDENTIFIER  shift, and go to state 107

    $default  reduce using rule 121 (epsilon)

    param_list  go to state 108
    epsilon     go to state 109


State 80

   45 function_block: T_FUNCTION T_IDENTIFIER $@8 ':' . T_DATATYPE ';' block ';'

    T_DATATYPE  shift, and go to state 110


State 81

   47 function_block: T_FUNCTION T_IDENTIFIER $@9 '(' . function_param_list ')' ':' T_DATATYPE ';' block ';'

    T_IDENTIFIER  shift, and go to state 111

    function_param_list  go to state 112


State 82

   72 while_statement: T_WHILE . expression T_DO statements

    T_IDENTIFIER  shift, and go to state 113
    T_INTVAL      shift, and go to state 114
    T_FLOATVAL    shift, and go to state 115
    T_BOOLVAL     shift, and go to state 116
    T_STRINGVAL   shift, and go to state 117
    '('           shift, and go to state 118

    value       go to state 119
    expression  go to state 120


State 83

   64 conditional_statement: T_IF . '(' boolean_expression ')' T_THEN execution_body if_then_follow

    '('  shift, and go to state 121


State 84

   56 execution_block: T_BEGIN execution_body T_END .

    $default  reduce using rule 56 (execution_block)


State 85

   76 print_statements: T_WRITELN . '(' T_STRINGVAL ')' ';'

    '('  shift, and go to state 122


State 86

   73 for_statement: T_FOR . T_IDENTIFIER T_ASOP for_list T_DO statements

    T_IDENTIFIER  shift, and go to state 123


State 87

   80 assignment_statement: T_IDENTIFIER . $@13 assignment_ops expression

    $default  reduce using rule 79 ($@13)

    $@13  go to state 124


State 88

   57 execution_body: execution_body statements .

    $default  reduce using rule 57 (execution_body)


State 89

   61 statements: structured_statements .

    $default  reduce using rule 61 (statements)


State 90

   62 structured_statements: conditional_statement .

    $default  reduce using rule 62 (structured_statements)


State 91

   63 structured_statements: repetitive_statement .

    $default  reduce using rule 63 (structured_statements)


State 92

   71 repetitive_statement: while_statement .

    $default  reduce using rule 71 (repetitive_statement)


State 93

   70 repetitive_statement: for_statement .

    $default  reduce using rule 70 (repetitive_statement)


State 94

   60 statements: print_statements .

    $default  reduce using rule 60 (statements)


State 95

   59 statements: assignment_statements .

    $default  reduce using rule 59 (statements)


State 96

   77 assignment_statements: assignment_statement . ';' assignment_statements

    ';'  shift, and go to state 125


State 97

   78 assignment_statements: epsilon .

    $default  reduce using rule 78 (assignment_statements)


State 98

   12 more_const_definition: T_IDENTIFIER T_SINGLEEQ some_numeric_type . ';' more_const_definition

    ';'  shift, and go to state 126


State 99

   29 more_type_identifiers: ',' T_IDENTIFIER $@4 more_type_identifiers .

    $default  reduce using rule 29 (more_type_identifiers)


State 100

   18 type_definition: T_IDENTIFIER $@1 more_type_identifiers T_SINGLEEQ T_DATATYPE $@2 . ';' type_definition

    ';'  shift, and go to state 127


State 101

   32 more_var_identifiers: ',' T_IDENTIFIER $@5 . more_var_identifiers

    ','  shift, and go to state 64

    $default  reduce using rule 121 (epsilon)

    more_var_identifiers  go to state 128
    epsilon               go to state 66


State 102

   27 data_type: T_ARRAY . '[' T_INDEXTYPE ']' T_OF T_DATATYPE

    '['  shift, and go to state 129


State 103

   26 data_type: T_IDENTIFIER .

    $default  reduce using rule 26 (data_type)


State 104

   25 data_type: T_DATATYPE .

    $default  reduce using rule 25 (data_type)


State 105

   23 variable_declaration: T_IDENTIFIER $@3 more_var_identifiers ':' data_type . ';' variable_declaration

    ';'  shift, and go to state 130


State 106

   38 procedure_block: T_PROCEDURE T_IDENTIFIER $@6 ';' block . ';'

    ';'  shift, and go to state 131


State 107

   41 param_list: T_IDENTIFIER . ':' T_DATATYPE
   42           | T_IDENTIFIER . ':' T_DATATYPE ';' param_list

    ':'  shift, and go to state 132


State 108

   40 procedure_block: T_PROCEDURE T_IDENTIFIER $@7 '(' param_list . ')' ';' block ';'

    ')'  shift, and go to state 133


State 109

   43 param_list: epsilon .

    $default  reduce using rule 43 (param_list)


State 110

   45 function_block: T_FUNCTION T_IDENTIFIER $@8 ':' T_DATATYPE . ';' block ';'

    ';'  shift, and go to state 134


State 111

   50 function_param_list: T_IDENTIFIER . $@10 more_func_identifiers ':' T_DATATYPE $@11 function_param_continue

    $default  reduce using rule 48 ($@10)

    $@10  go to state 135


State 112

   47 function_block: T_FUNCTION T_IDENTIFIER $@9 '(' function_param_list . ')' ':' T_DATATYPE ';' block ';'

    ')'  shift, and go to state 136


State 113

   85 expression: T_IDENTIFIER .

    $default  reduce using rule 85 (expression)


State 114

   81 value: T_INTVAL .

    $default  reduce using rule 81 (value)


State 115

   82 value: T_FLOATVAL .

    $default  reduce using rule 82 (value)


State 116

   83 value: T_BOOLVAL .

    $default  reduce using rule 83 (value)


State 117

   84 value: T_STRINGVAL .

    $default  reduce using rule 84 (value)


State 118

   87 expression: '(' . expression ')'

    T_IDENTIFIER  shift, and go to state 113
    T_INTVAL      shift, and go to state 114
    T_FLOATVAL    shift, and go to state 115
    T_BOOLVAL     shift, and go to state 116
    T_STRINGVAL   shift, and go to state 117
    '('           shift, and go to state 118

    value       go to state 119
    expression  go to state 137


State 119

   86 expression: value .

    $default  reduce using rule 86 (expression)


State 120

   72 while_statement: T_WHILE expression . T_DO statements
   88 expression: expression . operator expression

    T_DO        shift, and go to state 138
    T_BOOL_AND  shift, and go to state 139
    T_BOOL_OR   shift, and go to state 140
    T_BOOL_NOT  shift, and go to state 141
    T_REL_LE    shift, and go to state 142
    T_REL_GE    shift, and go to state 143
    T_REL_NE    shift, and go to state 144
    T_SINGLEEQ  shift, and go to state 145
    T_BIT_LS    shift, and go to state 146
    T_BIT_RS    shift, and go to state 147
    '+'         shift, and go to state 148
    '-'         shift, and go to state 149
    '*'         shift, and go to state 150
    '/'         shift, and go to state 151
    '%'         shift, and go to state 152
    '>'         shift, and go to state 153
    '<'         shift, and go to state 154
    '&'         shift, and go to state 155
    '|'         shift, and go to state 156
    '~'         shift, and go to state 157
    '!'         shift, and go to state 158

    operator        go to state 159
    arithmetic_ops  go to state 160
    relational_ops  go to state 161
    boolean_ops     go to state 162
    bitwise_ops     go to state 163


State 121

   64 conditional_statement: T_IF '(' . boolean_expression ')' T_THEN execution_body if_then_follow

    T_IDENTIFIER  shift, and go to state 113
    T_INTVAL      shift, and go to state 114
    T_FLOATVAL    shift, and go to state 115
    T_BOOLVAL     shift, and go to state 116
    T_STRINGVAL   shift, and go to state 117
    '('           shift, and go to state 118

    value               go to state 119
    expression          go to state 164
    boolean_expression  go to state 165


State 122

   76 print_statements: T_WRITELN '(' . T_STRINGVAL ')' ';'

    T_STRINGVAL  shift, and go to state 166


State 123

   73 for_statement: T_FOR T_IDENTIFIER . T_ASOP for_list T_DO statements

    T_ASOP  shift, and go to state 167


State 124

   80 assignment_statement: T_IDENTIFIER $@13 . assignment_ops expression

    T_ASOP     shift, and go to state 168
    T_AS_PE    shift, and go to state 169
    T_AS_SE    shift, and go to state 170
    T_AS_MULE  shift, and go to state 171
    T_AS_DIVE  shift, and go to state 172

    assignment_ops  go to state 173


State 125

   77 assignment_statements: assignment_statement ';' . assignment_statements

    T_IDENTIFIER  shift, and go to state 87

    T_IDENTIFIER  [reduce using rule 121 (epsilon)]
    $default      reduce using rule 121 (epsilon)

    assignment_statements  go to state 174
    assignment_statement   go to state 96
    epsilon                go to state 97


State 126

   12 more_const_definition: T_IDENTIFIER T_SINGLEEQ some_numeric_type ';' . more_const_definition

    T_IDENTIFIER  shift, and go to state 59

    $default  reduce using rule 121 (epsilon)

    more_const_definition  go to state 175
    epsilon                go to state 61


State 127

   18 type_definition: T_IDENTIFIER $@1 more_type_identifiers T_SINGLEEQ T_DATATYPE $@2 ';' . type_definition

    T_IDENTIFIER  shift, and go to state 28

    $default  reduce using rule 121 (epsilon)

    type_definition  go to state 176
    epsilon          go to state 30


State 128

   32 more_var_identifiers: ',' T_IDENTIFIER $@5 more_var_identifiers .

    $default  reduce using rule 32 (more_var_identifiers)


State 129

   27 data_type: T_ARRAY '[' . T_INDEXTYPE ']' T_OF T_DATATYPE

    T_INDEXTYPE  shift, and go to state 177


State 130

   23 variable_declaration: T_IDENTIFIER $@3 more_var_identifiers ':' data_type ';' . variable_declaration

    T_IDENTIFIER  shift, and go to state 39

    $default  reduce using rule 121 (epsilon)

    variable_declaration  go to state 178
    epsilon               go to state 41


State 131

   38 procedure_block: T_PROCEDURE T_IDENTIFIER $@6 ';' block ';' .

    $default  reduce using rule 38 (procedure_block)


State 132

   41 param_list: T_IDENTIFIER ':' . T_DATATYPE
   42           | T_IDENTIFIER ':' . T_DATATYPE ';' param_list

    T_DATATYPE  shift, and go to state 179


State 133

   40 procedure_block: T_PROCEDURE T_IDENTIFIER $@7 '(' param_list ')' . ';' block ';'

    ';'  shift, and go to state 180


State 134

   45 function_block: T_FUNCTION T_IDENTIFIER $@8 ':' T_DATATYPE ';' . block ';'

    T_USES  shift, and go to state 7

    $default  reduce using rule 121 (epsilon)

    block       go to state 181
    uses_block  go to state 9
    epsilon     go to state 10


State 135

   50 function_param_list: T_IDENTIFIER $@10 . more_func_identifiers ':' T_DATATYPE $@11 function_param_continue

    ','  shift, and go to state 182

    $default  reduce using rule 121 (epsilon)

    more_func_identifiers  go to state 183
    epsilon                go to state 184


State 136

   47 function_block: T_FUNCTION T_IDENTIFIER $@9 '(' function_param_list ')' . ':' T_DATATYPE ';' block ';'

    ':'  shift, and go to state 185


State 137

   87 expression: '(' expression . ')'
   88           | expression . operator expression

    T_BOOL_AND  shift, and go to state 139
    T_BOOL_OR   shift, and go to state 140
    T_BOOL_NOT  shift, and go to state 141
    T_REL_LE    shift, and go to state 142
    T_REL_GE    shift, and go to state 143
    T_REL_NE    shift, and go to state 144
    T_SINGLEEQ  shift, and go to state 145
    T_BIT_LS    shift, and go to state 146
    T_BIT_RS    shift, and go to state 147
    '+'         shift, and go to state 148
    '-'         shift, and go to state 149
    '*'         shift, and go to state 150
    '/'         shift, and go to state 151
    ')'         shift, and go to state 186
    '%'         shift, and go to state 152
    '>'         shift, and go to state 153
    '<'         shift, and go to state 154
    '&'         shift, and go to state 155
    '|'         shift, and go to state 156
    '~'         shift, and go to state 157
    '!'         shift, and go to state 158

    operator        go to state 159
    arithmetic_ops  go to state 160
    relational_ops  go to state 161
    boolean_ops     go to state 162
    bitwise_ops     go to state 163


State 138

   72 while_statement: T_WHILE expression T_DO . statements

    T_WHILE       shift, and go to state 82
    T_IF          shift, and go to state 83
    T_WRITELN     shift, and go to state 85
    T_FOR         shift, and go to state 86
    T_IDENTIFIER  shift, and go to state 87

    T_WHILE       [reduce using rule 121 (epsilon)]
    T_IF          [reduce using rule 121 (epsilon)]
    T_WRITELN     [reduce using rule 121 (epsilon)]
    T_FOR         [reduce using rule 121 (epsilon)]
    T_IDENTIFIER  [reduce using rule 121 (epsilon)]
    $default      reduce using rule 121 (epsilon)

    statements             go to state 187
    structured_statements  go to state 89
    conditional_statement  go to state 90
    repetitive_statement   go to state 91
    while_statement        go to state 92
    for_statement          go to state 93
    print_statements       go to state 94
    assignment_statements  go to state 95
    assignment_statement   go to state 96
    epsilon                go to state 97


State 139

  110 boolean_ops: T_BOOL_AND .

    $default  reduce using rule 110 (boolean_ops)


State 140

  111 boolean_ops: T_BOOL_OR .

    $default  reduce using rule 111 (boolean_ops)


State 141

  112 boolean_ops: T_BOOL_NOT .

    $default  reduce using rule 112 (boolean_ops)


State 142

  107 relational_ops: T_REL_LE .

    $default  reduce using rule 107 (relational_ops)


State 143

  108 relational_ops: T_REL_GE .

    $default  reduce using rule 108 (relational_ops)


State 144

  109 relational_ops: T_REL_NE .

    $default  reduce using rule 109 (relational_ops)


State 145

  104 relational_ops: T_SINGLEEQ .

    $default  reduce using rule 104 (relational_ops)


State 146

  117 bitwise_ops: T_BIT_LS .

    $default  reduce using rule 117 (bitwise_ops)


State 147

  118 bitwise_ops: T_BIT_RS .

    $default  reduce using rule 118 (bitwise_ops)


State 148

   99 arithmetic_ops: '+' .

    $default  reduce using rule 99 (arithmetic_ops)


State 149

  102 arithmetic_ops: '-' .

    $default  reduce using rule 102 (arithmetic_ops)


State 150

  100 arithmetic_ops: '*' .

    $default  reduce using rule 100 (arithmetic_ops)


State 151

  101 arithmetic_ops: '/' .

    $default  reduce using rule 101 (arithmetic_ops)


State 152

  103 arithmetic_ops: '%' .

    $default  reduce using rule 103 (arithmetic_ops)


State 153

  105 relational_ops: '>' .

    $default  reduce using rule 105 (relational_ops)


State 154

  106 relational_ops: '<' .

    $default  reduce using rule 106 (relational_ops)


State 155

  113 bitwise_ops: '&' .

    $default  reduce using rule 113 (bitwise_ops)


State 156

  114 bitwise_ops: '|' .

    $default  reduce using rule 114 (bitwise_ops)


State 157

  115 bitwise_ops: '~' .

    $default  reduce using rule 115 (bitwise_ops)


State 158

  116 bitwise_ops: '!' .

    $default  reduce using rule 116 (bitwise_ops)


State 159

   88 expression: expression operator . expression

    T_IDENTIFIER  shift, and go to state 113
    T_INTVAL      shift, and go to state 114
    T_FLOATVAL    shift, and go to state 115
    T_BOOLVAL     shift, and go to state 116
    T_STRINGVAL   shift, and go to state 117
    '('           shift, and go to state 118

    value       go to state 119
    expression  go to state 188


State 160

   90 operator: arithmetic_ops .

    $default  reduce using rule 90 (operator)


State 161

   91 operator: relational_ops .

    $default  reduce using rule 91 (operator)


State 162

   92 operator: boolean_ops .

    $default  reduce using rule 92 (operator)


State 163

   93 operator: bitwise_ops .

    $default  reduce using rule 93 (operator)


State 164

   88 expression: expression . operator expression
   89 boolean_expression: expression . relational_ops expression

    T_BOOL_AND  shift, and go to state 139
    T_BOOL_OR   shift, and go to state 140
    T_BOOL_NOT  shift, and go to state 141
    T_REL_LE    shift, and go to state 142
    T_REL_GE    shift, and go to state 143
    T_REL_NE    shift, and go to state 144
    T_SINGLEEQ  shift, and go to state 145
    T_BIT_LS    shift, and go to state 146
    T_BIT_RS    shift, and go to state 147
    '+'         shift, and go to state 148
    '-'         shift, and go to state 149
    '*'         shift, and go to state 150
    '/'         shift, and go to state 151
    '%'         shift, and go to state 152
    '>'         shift, and go to state 153
    '<'         shift, and go to state 154
    '&'         shift, and go to state 155
    '|'         shift, and go to state 156
    '~'         shift, and go to state 157
    '!'         shift, and go to state 158

    operator        go to state 159
    arithmetic_ops  go to state 160
    relational_ops  go to state 189
    boolean_ops     go to state 162
    bitwise_ops     go to state 163


State 165

   64 conditional_statement: T_IF '(' boolean_expression . ')' T_THEN execution_body if_then_follow

    ')'  shift, and go to state 190


State 166

   76 print_statements: T_WRITELN '(' T_STRINGVAL . ')' ';'

    ')'  shift, and go to state 191


State 167

   73 for_statement: T_FOR T_IDENTIFIER T_ASOP . for_list T_DO statements

    T_IDENTIFIER  shift, and go to state 113
    T_INTVAL      shift, and go to state 114
    T_FLOATVAL    shift, and go to state 115
    T_BOOLVAL     shift, and go to state 116
    T_STRINGVAL   shift, and go to state 117
    '('           shift, and go to state 118

    for_list    go to state 192
    value       go to state 119
    expression  go to state 193


State 168

   94 assignment_ops: T_ASOP .

    $default  reduce using rule 94 (assignment_ops)


State 169

   95 assignment_ops: T_AS_PE .

    $default  reduce using rule 95 (assignment_ops)


State 170

   96 assignment_ops: T_AS_SE .

    $default  reduce using rule 96 (assignment_ops)


State 171

   97 assignment_ops: T_AS_MULE .

    $default  reduce using rule 97 (assignment_ops)


State 172

   98 assignment_ops: T_AS_DIVE .

    $default  reduce using rule 98 (assignment_ops)


State 173

   80 assignment_statement: T_IDENTIFIER $@13 assignment_ops . expression

    T_IDENTIFIER  shift, and go to state 113
    T_INTVAL      shift, and go to state 114
    T_FLOATVAL    shift, and go to state 115
    T_BOOLVAL     shift, and go to state 116
    T_STRINGVAL   shift, and go to state 117
    '('           shift, and go to state 118

    value       go to state 119
    expression  go to state 194


State 174

   77 assignment_statements: assignment_statement ';' assignment_statements .

    $default  reduce using rule 77 (assignment_statements)


State 175

   12 more_const_definition: T_IDENTIFIER T_SINGLEEQ some_numeric_type ';' more_const_definition .

    $default  reduce using rule 12 (more_const_definition)


State 176

   18 type_definition: T_IDENTIFIER $@1 more_type_identifiers T_SINGLEEQ T_DATATYPE $@2 ';' type_definition .

    $default  reduce using rule 18 (type_definition)


State 177

   27 data_type: T_ARRAY '[' T_INDEXTYPE . ']' T_OF T_DATATYPE

    ']'  shift, and go to state 195


State 178

   23 variable_declaration: T_IDENTIFIER $@3 more_var_identifiers ':' data_type ';' variable_declaration .

    $default  reduce using rule 23 (variable_declaration)


State 179

   41 param_list: T_IDENTIFIER ':' T_DATATYPE .
   42           | T_IDENTIFIER ':' T_DATATYPE . ';' param_list

    ';'  shift, and go to state 196

    $default  reduce using rule 41 (param_list)


State 180

   40 procedure_block: T_PROCEDURE T_IDENTIFIER $@7 '(' param_list ')' ';' . block ';'

    T_USES  shift, and go to state 7

    $default  reduce using rule 121 (epsilon)

    block       go to state 197
    uses_block  go to state 9
    epsilon     go to state 10


State 181

   45 function_block: T_FUNCTION T_IDENTIFIER $@8 ':' T_DATATYPE ';' block . ';'

    ';'  shift, and go to state 198


State 182

   54 more_func_identifiers: ',' . T_IDENTIFIER $@12 more_func_identifiers

    T_IDENTIFIER  shift, and go to state 199


State 183

   50 function_param_list: T_IDENTIFIER $@10 more_func_identifiers . ':' T_DATATYPE $@11 function_param_continue

    ':'  shift, and go to state 200


State 184

   55 more_func_identifiers: epsilon .

    $default  reduce using rule 55 (more_func_identifiers)


State 185

   47 function_block: T_FUNCTION T_IDENTIFIER $@9 '(' function_param_list ')' ':' . T_DATATYPE ';' block ';'

    T_DATATYPE  shift, and go to state 201


State 186

   87 expression: '(' expression ')' .

    $default  reduce using rule 87 (expression)


State 187

   72 while_statement: T_WHILE expression T_DO statements .

    $default  reduce using rule 72 (while_statement)


State 188

   88 expression: expression . operator expression
   88           | expression operator expression .

    T_BOOL_AND  shift, and go to state 139
    T_BOOL_OR   shift, and go to state 140
    T_BOOL_NOT  shift, and go to state 141
    T_REL_LE    shift, and go to state 142
    T_REL_GE    shift, and go to state 143
    T_REL_NE    shift, and go to state 144
    T_SINGLEEQ  shift, and go to state 145
    T_BIT_LS    shift, and go to state 146
    T_BIT_RS    shift, and go to state 147
    '+'         shift, and go to state 148
    '-'         shift, and go to state 149
    '*'         shift, and go to state 150
    '/'         shift, and go to state 151
    '%'         shift, and go to state 152
    '>'         shift, and go to state 153
    '<'         shift, and go to state 154
    '&'         shift, and go to state 155
    '|'         shift, and go to state 156
    '~'         shift, and go to state 157
    '!'         shift, and go to state 158

    T_BOOL_AND  [reduce using rule 88 (expression)]
    T_BOOL_OR   [reduce using rule 88 (expression)]
    T_BOOL_NOT  [reduce using rule 88 (expression)]
    T_REL_LE    [reduce using rule 88 (expression)]
    T_REL_GE    [reduce using rule 88 (expression)]
    T_REL_NE    [reduce using rule 88 (expression)]
    T_SINGLEEQ  [reduce using rule 88 (expression)]
    T_BIT_LS    [reduce using rule 88 (expression)]
    T_BIT_RS    [reduce using rule 88 (expression)]
    '+'         [reduce using rule 88 (expression)]
    '-'         [reduce using rule 88 (expression)]
    '*'         [reduce using rule 88 (expression)]
    '/'         [reduce using rule 88 (expression)]
    '%'         [reduce using rule 88 (expression)]
    '>'         [reduce using rule 88 (expression)]
    '<'         [reduce using rule 88 (expression)]
    '&'         [reduce using rule 88 (expression)]
    '|'         [reduce using rule 88 (expression)]
    '~'         [reduce using rule 88 (expression)]
    '!'         [reduce using rule 88 (expression)]
    $default    reduce using rule 88 (expression)

    operator        go to state 159
    arithmetic_ops  go to state 160
    relational_ops  go to state 161
    boolean_ops     go to state 162
    bitwise_ops     go to state 163


State 189

   89 boolean_expression: expression relational_ops . expression
   91 operator: relational_ops .

    T_IDENTIFIER  shift, and go to state 113
    T_INTVAL      shift, and go to state 114
    T_FLOATVAL    shift, and go to state 115
    T_BOOLVAL     shift, and go to state 116
    T_STRINGVAL   shift, and go to state 117
    '('           shift, and go to state 118

    T_IDENTIFIER  [reduce using rule 91 (operator)]
    T_INTVAL      [reduce using rule 91 (operator)]
    T_FLOATVAL    [reduce using rule 91 (operator)]
    T_BOOLVAL     [reduce using rule 91 (operator)]
    T_STRINGVAL   [reduce using rule 91 (operator)]
    '('           [reduce using rule 91 (operator)]

    value       go to state 119
    expression  go to state 202


State 190

   64 conditional_statement: T_IF '(' boolean_expression ')' . T_THEN execution_body if_then_follow

    T_THEN  shift, and go to state 203


State 191

   76 print_statements: T_WRITELN '(' T_STRINGVAL ')' . ';'

    ';'  shift, and go to state 204


State 192

   73 for_statement: T_FOR T_IDENTIFIER T_ASOP for_list . T_DO statements

    T_DO  shift, and go to state 205


State 193

   74 for_list: expression . T_TO expression
   75         | expression . T_DOWNTO expression
   88 expression: expression . operator expression

    T_TO        shift, and go to state 206
    T_DOWNTO    shift, and go to state 207
    T_BOOL_AND  shift, and go to state 139
    T_BOOL_OR   shift, and go to state 140
    T_BOOL_NOT  shift, and go to state 141
    T_REL_LE    shift, and go to state 142
    T_REL_GE    shift, and go to state 143
    T_REL_NE    shift, and go to state 144
    T_SINGLEEQ  shift, and go to state 145
    T_BIT_LS    shift, and go to state 146
    T_BIT_RS    shift, and go to state 147
    '+'         shift, and go to state 148
    '-'         shift, and go to state 149
    '*'         shift, and go to state 150
    '/'         shift, and go to state 151
    '%'         shift, and go to state 152
    '>'         shift, and go to state 153
    '<'         shift, and go to state 154
    '&'         shift, and go to state 155
    '|'         shift, and go to state 156
    '~'         shift, and go to state 157
    '!'         shift, and go to state 158

    operator        go to state 159
    arithmetic_ops  go to state 160
    relational_ops  go to state 161
    boolean_ops     go to state 162
    bitwise_ops     go to state 163


State 194

   80 assignment_statement: T_IDENTIFIER $@13 assignment_ops expression .
   88 expression: expression . operator expression

    T_BOOL_AND  shift, and go to state 139
    T_BOOL_OR   shift, and go to state 140
    T_BOOL_NOT  shift, and go to state 141
    T_REL_LE    shift, and go to state 142
    T_REL_GE    shift, and go to state 143
    T_REL_NE    shift, and go to state 144
    T_SINGLEEQ  shift, and go to state 145
    T_BIT_LS    shift, and go to state 146
    T_BIT_RS    shift, and go to state 147
    '+'         shift, and go to state 148
    '-'         shift, and go to state 149
    '*'         shift, and go to state 150
    '/'         shift, and go to state 151
    '%'         shift, and go to state 152
    '>'         shift, and go to state 153
    '<'         shift, and go to state 154
    '&'         shift, and go to state 155
    '|'         shift, and go to state 156
    '~'         shift, and go to state 157
    '!'         shift, and go to state 158

    $default  reduce using rule 80 (assignment_statement)

    operator        go to state 159
    arithmetic_ops  go to state 160
    relational_ops  go to state 161
    boolean_ops     go to state 162
    bitwise_ops     go to state 163


State 195

   27 data_type: T_ARRAY '[' T_INDEXTYPE ']' . T_OF T_DATATYPE

    T_OF  shift, and go to state 208


State 196

   42 param_list: T_IDENTIFIER ':' T_DATATYPE ';' . param_list

    T_IDENTIFIER  shift, and go to state 107

    $default  reduce using rule 121 (epsilon)

    param_list  go to state 209
    epsilon     go to state 109


State 197

   40 procedure_block: T_PROCEDURE T_IDENTIFIER $@7 '(' param_list ')' ';' block . ';'

    ';'  shift, and go to state 210


State 198

   45 function_block: T_FUNCTION T_IDENTIFIER $@8 ':' T_DATATYPE ';' block ';' .

    $default  reduce using rule 45 (function_block)


State 199

   54 more_func_identifiers: ',' T_IDENTIFIER . $@12 more_func_identifiers

    $default  reduce using rule 53 ($@12)

    $@12  go to state 211


State 200

   50 function_param_list: T_IDENTIFIER $@10 more_func_identifiers ':' . T_DATATYPE $@11 function_param_continue

    T_DATATYPE  shift, and go to state 212


State 201

   47 function_block: T_FUNCTION T_IDENTIFIER $@9 '(' function_param_list ')' ':' T_DATATYPE . ';' block ';'

    ';'  shift, and go to state 213


State 202

   88 expression: expression . operator expression
   89 boolean_expression: expression relational_ops expression .

    T_BOOL_AND  shift, and go to state 139
    T_BOOL_OR   shift, and go to state 140
    T_BOOL_NOT  shift, and go to state 141
    T_REL_LE    shift, and go to state 142
    T_REL_GE    shift, and go to state 143
    T_REL_NE    shift, and go to state 144
    T_SINGLEEQ  shift, and go to state 145
    T_BIT_LS    shift, and go to state 146
    T_BIT_RS    shift, and go to state 147
    '+'         shift, and go to state 148
    '-'         shift, and go to state 149
    '*'         shift, and go to state 150
    '/'         shift, and go to state 151
    '%'         shift, and go to state 152
    '>'         shift, and go to state 153
    '<'         shift, and go to state 154
    '&'         shift, and go to state 155
    '|'         shift, and go to state 156
    '~'         shift, and go to state 157
    '!'         shift, and go to state 158

    $default  reduce using rule 89 (boolean_expression)

    operator        go to state 159
    arithmetic_ops  go to state 160
    relational_ops  go to state 161
    boolean_ops     go to state 162
    bitwise_ops     go to state 163


State 203

   64 conditional_statement: T_IF '(' boolean_expression ')' T_THEN . execution_body if_then_follow

    $default  reduce using rule 121 (epsilon)

    execution_body  go to state 214
    epsilon         go to state 72


State 204

   76 print_statements: T_WRITELN '(' T_STRINGVAL ')' ';' .

    $default  reduce using rule 76 (print_statements)


State 205

   73 for_statement: T_FOR T_IDENTIFIER T_ASOP for_list T_DO . statements

    T_WHILE       shift, and go to state 82
    T_IF          shift, and go to state 83
    T_WRITELN     shift, and go to state 85
    T_FOR         shift, and go to state 86
    T_IDENTIFIER  shift, and go to state 87

    T_WHILE       [reduce using rule 121 (epsilon)]
    T_IF          [reduce using rule 121 (epsilon)]
    T_WRITELN     [reduce using rule 121 (epsilon)]
    T_FOR         [reduce using rule 121 (epsilon)]
    T_IDENTIFIER  [reduce using rule 121 (epsilon)]
    $default      reduce using rule 121 (epsilon)

    statements             go to state 215
    structured_statements  go to state 89
    conditional_statement  go to state 90
    repetitive_statement   go to state 91
    while_statement        go to state 92
    for_statement          go to state 93
    print_statements       go to state 94
    assignment_statements  go to state 95
    assignment_statement   go to state 96
    epsilon                go to state 97


State 206

   74 for_list: expression T_TO . expression

    T_IDENTIFIER  shift, and go to state 113
    T_INTVAL      shift, and go to state 114
    T_FLOATVAL    shift, and go to state 115
    T_BOOLVAL     shift, and go to state 116
    T_STRINGVAL   shift, and go to state 117
    '('           shift, and go to state 118

    value       go to state 119
    expression  go to state 216


State 207

   75 for_list: expression T_DOWNTO . expression

    T_IDENTIFIER  shift, and go to state 113
    T_INTVAL      shift, and go to state 114
    T_FLOATVAL    shift, and go to state 115
    T_BOOLVAL     shift, and go to state 116
    T_STRINGVAL   shift, and go to state 117
    '('           shift, and go to state 118

    value       go to state 119
    expression  go to state 217


State 208

   27 data_type: T_ARRAY '[' T_INDEXTYPE ']' T_OF . T_DATATYPE

    T_DATATYPE  shift, and go to state 218


State 209

   42 param_list: T_IDENTIFIER ':' T_DATATYPE ';' param_list .

    $default  reduce using rule 42 (param_list)


State 210

   40 procedure_block: T_PROCEDURE T_IDENTIFIER $@7 '(' param_list ')' ';' block ';' .

    $default  reduce using rule 40 (procedure_block)


State 211

   54 more_func_identifiers: ',' T_IDENTIFIER $@12 . more_func_identifiers

    ','  shift, and go to state 182

    $default  reduce using rule 121 (epsilon)

    more_func_identifiers  go to state 219
    epsilon                go to state 184


State 212

   50 function_param_list: T_IDENTIFIER $@10 more_func_identifiers ':' T_DATATYPE . $@11 function_param_continue

    $default  reduce using rule 49 ($@11)

    $@11  go to state 220


State 213

   47 function_block: T_FUNCTION T_IDENTIFIER $@9 '(' function_param_list ')' ':' T_DATATYPE ';' . block ';'

    T_USES  shift, and go to state 7

    $default  reduce using rule 121 (epsilon)

    block       go to state 221
    uses_block  go to state 9
    epsilon     go to state 10


State 214

   57 execution_body: execution_body . statements
   64 conditional_statement: T_IF '(' boolean_expression ')' T_THEN execution_body . if_then_follow

    T_WHILE       shift, and go to state 82
    T_IF          shift, and go to state 83
    T_ELSE        shift, and go to state 222
    T_WRITELN     shift, and go to state 85
    T_FOR         shift, and go to state 86
    T_IDENTIFIER  shift, and go to state 87

    T_WHILE       [reduce using rule 121 (epsilon)]
    T_IF          [reduce using rule 121 (epsilon)]
    T_ELSE        [reduce using rule 121 (epsilon)]
    T_WRITELN     [reduce using rule 121 (epsilon)]
    T_FOR         [reduce using rule 121 (epsilon)]
    T_IDENTIFIER  [reduce using rule 121 (epsilon)]
    $default      reduce using rule 121 (epsilon)

    statements             go to state 88
    structured_statements  go to state 89
    conditional_statement  go to state 90
    if_then_follow         go to state 223
    else_if_block          go to state 224
    else_block             go to state 225
    repetitive_statement   go to state 91
    while_statement        go to state 92
    for_statement          go to state 93
    print_statements       go to state 94
    assignment_statements  go to state 95
    assignment_statement   go to state 96
    epsilon                go to state 226


State 215

   73 for_statement: T_FOR T_IDENTIFIER T_ASOP for_list T_DO statements .

    $default  reduce using rule 73 (for_statement)


State 216

   74 for_list: expression T_TO expression .
   88 expression: expression . operator expression

    T_BOOL_AND  shift, and go to state 139
    T_BOOL_OR   shift, and go to state 140
    T_BOOL_NOT  shift, and go to state 141
    T_REL_LE    shift, and go to state 142
    T_REL_GE    shift, and go to state 143
    T_REL_NE    shift, and go to state 144
    T_SINGLEEQ  shift, and go to state 145
    T_BIT_LS    shift, and go to state 146
    T_BIT_RS    shift, and go to state 147
    '+'         shift, and go to state 148
    '-'         shift, and go to state 149
    '*'         shift, and go to state 150
    '/'         shift, and go to state 151
    '%'         shift, and go to state 152
    '>'         shift, and go to state 153
    '<'         shift, and go to state 154
    '&'         shift, and go to state 155
    '|'         shift, and go to state 156
    '~'         shift, and go to state 157
    '!'         shift, and go to state 158

    $default  reduce using rule 74 (for_list)

    operator        go to state 159
    arithmetic_ops  go to state 160
    relational_ops  go to state 161
    boolean_ops     go to state 162
    bitwise_ops     go to state 163


State 217

   75 for_list: expression T_DOWNTO expression .
   88 expression: expression . operator expression

    T_BOOL_AND  shift, and go to state 139
    T_BOOL_OR   shift, and go to state 140
    T_BOOL_NOT  shift, and go to state 141
    T_REL_LE    shift, and go to state 142
    T_REL_GE    shift, and go to state 143
    T_REL_NE    shift, and go to state 144
    T_SINGLEEQ  shift, and go to state 145
    T_BIT_LS    shift, and go to state 146
    T_BIT_RS    shift, and go to state 147
    '+'         shift, and go to state 148
    '-'         shift, and go to state 149
    '*'         shift, and go to state 150
    '/'         shift, and go to state 151
    '%'         shift, and go to state 152
    '>'         shift, and go to state 153
    '<'         shift, and go to state 154
    '&'         shift, and go to state 155
    '|'         shift, and go to state 156
    '~'         shift, and go to state 157
    '!'         shift, and go to state 158

    $default  reduce using rule 75 (for_list)

    operator        go to state 159
    arithmetic_ops  go to state 160
    relational_ops  go to state 161
    boolean_ops     go to state 162
    bitwise_ops     go to state 163


State 218

   27 data_type: T_ARRAY '[' T_INDEXTYPE ']' T_OF T_DATATYPE .

    $default  reduce using rule 27 (data_type)


State 219

   54 more_func_identifiers: ',' T_IDENTIFIER $@12 more_func_identifiers .

    $default  reduce using rule 54 (more_func_identifiers)


State 220

   50 function_param_list: T_IDENTIFIER $@10 more_func_identifiers ':' T_DATATYPE $@11 . function_param_continue

    ';'  shift, and go to state 227

    $default  reduce using rule 121 (epsilon)

    function_param_continue  go to state 228
    epsilon                  go to state 229


State 221

   47 function_block: T_FUNCTION T_IDENTIFIER $@9 '(' function_param_list ')' ':' T_DATATYPE ';' block . ';'

    ';'  shift, and go to state 230


State 222

   68 else_if_block: T_ELSE . conditional_statement
   69 else_block: T_ELSE . execution_body

    T_IF  shift, and go to state 83

    T_IF      [reduce using rule 121 (epsilon)]
    $default  reduce using rule 121 (epsilon)

    execution_body         go to state 231
    conditional_statement  go to state 232
    epsilon                go to state 72


State 223

   64 conditional_statement: T_IF '(' boolean_expression ')' T_THEN execution_body if_then_follow .

    $default  reduce using rule 64 (conditional_statement)


State 224

   65 if_then_follow: else_if_block .

    $default  reduce using rule 65 (if_then_follow)


State 225

   66 if_then_follow: else_block .

    $default  reduce using rule 66 (if_then_follow)


State 226

   67 if_then_follow: epsilon .
   78 assignment_statements: epsilon .

    T_WHILE       reduce using rule 67 (if_then_follow)
    T_WHILE       [reduce using rule 78 (assignment_statements)]
    T_IF          reduce using rule 67 (if_then_follow)
    T_IF          [reduce using rule 78 (assignment_statements)]
    T_ELSE        reduce using rule 67 (if_then_follow)
    T_ELSE        [reduce using rule 78 (assignment_statements)]
    T_END         reduce using rule 67 (if_then_follow)
    T_END         [reduce using rule 78 (assignment_statements)]
    T_WRITELN     reduce using rule 67 (if_then_follow)
    T_WRITELN     [reduce using rule 78 (assignment_statements)]
    T_FOR         reduce using rule 67 (if_then_follow)
    T_FOR         [reduce using rule 78 (assignment_statements)]
    T_IDENTIFIER  reduce using rule 67 (if_then_follow)
    T_IDENTIFIER  [reduce using rule 78 (assignment_statements)]
    $default      reduce using rule 67 (if_then_follow)


State 227

   52 function_param_continue: ';' . function_param_list

    T_IDENTIFIER  shift, and go to state 111

    function_param_list  go to state 233


State 228

   50 function_param_list: T_IDENTIFIER $@10 more_func_identifiers ':' T_DATATYPE $@11 function_param_continue .

    $default  reduce using rule 50 (function_param_list)


State 229

   51 function_param_continue: epsilon .

    $default  reduce using rule 51 (function_param_continue)


State 230

   47 function_block: T_FUNCTION T_IDENTIFIER $@9 '(' function_param_list ')' ':' T_DATATYPE ';' block ';' .

    $default  reduce using rule 47 (function_block)


State 231

   57 execution_body: execution_body . statements
   69 else_block: T_ELSE execution_body .

    T_WHILE       shift, and go to state 82
    T_IF          shift, and go to state 83
    T_WRITELN     shift, and go to state 85
    T_FOR         shift, and go to state 86
    T_IDENTIFIER  shift, and go to state 87

    T_WHILE       [reduce using rule 69 (else_block)]
    T_WHILE       [reduce using rule 121 (epsilon)]
    T_IF          [reduce using rule 69 (else_block)]
    T_IF          [reduce using rule 121 (epsilon)]
    T_ELSE        reduce using rule 69 (else_block)
    T_ELSE        [reduce using rule 121 (epsilon)]
    T_END         reduce using rule 69 (else_block)
    T_END         [reduce using rule 121 (epsilon)]
    T_WRITELN     [reduce using rule 69 (else_block)]
    T_WRITELN     [reduce using rule 121 (epsilon)]
    T_FOR         [reduce using rule 69 (else_block)]
    T_FOR         [reduce using rule 121 (epsilon)]
    T_IDENTIFIER  [reduce using rule 69 (else_block)]
    T_IDENTIFIER  [reduce using rule 121 (epsilon)]
    $default      reduce using rule 69 (else_block)

    statements             go to state 88
    structured_statements  go to state 89
    conditional_statement  go to state 90
    repetitive_statement   go to state 91
    while_statement        go to state 92
    for_statement          go to state 93
    print_statements       go to state 94
    assignment_statements  go to state 95
    assignment_statement   go to state 96
    epsilon                go to state 97


State 232

   68 else_if_block: T_ELSE conditional_statement .

    $default  reduce using rule 68 (else_if_block)


State 233

   52 function_param_continue: ';' function_param_list .

    $default  reduce using rule 52 (function_param_continue)
