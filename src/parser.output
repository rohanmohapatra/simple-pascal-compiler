Terminals unused in grammar

   T_ARRAY


State 71 conflicts: 6 shift/reduce
State 129 conflicts: 1 shift/reduce
State 141 conflicts: 5 shift/reduce
State 185 conflicts: 20 shift/reduce
State 186 conflicts: 6 shift/reduce
State 200 conflicts: 5 shift/reduce
State 208 conflicts: 6 shift/reduce
State 215 conflicts: 1 shift/reduce
State 219 conflicts: 7 reduce/reduce
State 224 conflicts: 5 shift/reduce, 7 reduce/reduce


Grammar

    0 $accept: startPascal $end

    1 startPascal: program

    2 program: prog_heading block '.'

    3 prog_heading: T_PROGRAM T_IDENTIFIER ';'

    4 block: uses_block constant_block type_block variable_block function_and_procedure_block execution_block

    5 uses_block: T_USES T_IDENTIFIER more_libs ';'
    6           | epsilon

    7 more_libs: ',' T_IDENTIFIER more_libs
    8          | epsilon

    9 constant_block: T_CONST const_definition
   10               | epsilon

   11 const_definition: T_IDENTIFIER T_SINGLEEQ some_numeric_type ';' more_const_definition

   12 more_const_definition: T_IDENTIFIER T_SINGLEEQ some_numeric_type ';' more_const_definition
   13                      | epsilon

   14 type_block: T_TYPE type_definition
   15           | epsilon

   16 $@1: %empty

   17 $@2: %empty

   18 type_definition: T_IDENTIFIER $@1 more_type_identifiers T_SINGLEEQ T_DATATYPE $@2 ';' type_definition
   19                | epsilon

   20 variable_block: T_VAR variable_declaration
   21               | epsilon

   22 $@3: %empty

   23 variable_declaration: T_IDENTIFIER $@3 more_var_identifiers ':' data_type ';' variable_declaration
   24                     | epsilon

   25 data_type: T_DATATYPE
   26          | T_IDENTIFIER

   27 $@4: %empty

   28 more_type_identifiers: ',' T_IDENTIFIER $@4 more_type_identifiers
   29                      | epsilon

   30 $@5: %empty

   31 more_var_identifiers: ',' T_IDENTIFIER $@5 more_var_identifiers
   32                     | epsilon

   33 function_and_procedure_block: function_block function_and_procedure_block
   34                             | procedure_block function_and_procedure_block
   35                             | epsilon

   36 $@6: %empty

   37 procedure_block: T_PROCEDURE T_IDENTIFIER $@6 ';' block ';'

   38 $@7: %empty

   39 procedure_block: T_PROCEDURE T_IDENTIFIER $@7 '(' param_list ')' ';' block ';'

   40 param_list: T_IDENTIFIER ':' T_DATATYPE
   41           | T_IDENTIFIER ':' T_DATATYPE ';' param_list
   42           | epsilon

   43 $@8: %empty

   44 function_block: T_FUNCTION T_IDENTIFIER $@8 ':' T_DATATYPE ';' block ';'

   45 $@9: %empty

   46 function_block: T_FUNCTION T_IDENTIFIER $@9 '(' function_param_list ')' ':' T_DATATYPE ';' block ';'

   47 $@10: %empty

   48 $@11: %empty

   49 function_param_list: T_IDENTIFIER $@10 more_func_identifiers ':' T_DATATYPE $@11 function_param_continue

   50 function_param_continue: epsilon
   51                        | ';' function_param_list

   52 $@12: %empty

   53 more_func_identifiers: ',' T_IDENTIFIER $@12 more_func_identifiers
   54                      | epsilon

   55 execution_block: T_BEGIN execution_body T_END

   56 execution_body: execution_body statements
   57               | epsilon

   58 statements: assignment_statements
   59           | print_statements
   60           | structured_statements

   61 structured_statements: conditional_statement
   62                      | repetitive_statement

   63 conditional_statement: T_IF '(' boolean_expression ')' T_THEN execution_body if_then_follow

   64 if_then_follow: else_if_block
   65               | else_block
   66               | epsilon

   67 else_if_block: T_ELSE conditional_statement

   68 else_block: T_ELSE execution_body

   69 repetitive_statement: for_statement
   70                     | while_statement

   71 while_statement: T_WHILE expression T_DO statements

   72 for_statement: T_FOR T_IDENTIFIER T_ASOP for_list T_DO statements

   73 for_list: expression T_TO expression
   74         | expression T_DOWNTO expression

   75 print_statements: T_WRITELN '(' T_STRINGVAL ')' ';'

   76 assignment_statements: assignment_statement ';' assignment_statements
   77                      | epsilon

   78 assignment_statement: T_IDENTIFIER assignment_ops expression

   79 value: T_INTVAL
   80      | T_FLOATVAL
   81      | T_BOOLVAL
   82      | T_STRINGVAL

   83 expression: T_IDENTIFIER
   84           | value
   85           | '(' expression ')'
   86           | expression operator expression

   87 boolean_expression: expression relational_ops expression

   88 operator: arithmetic_ops
   89         | relational_ops
   90         | boolean_ops
   91         | bitwise_ops

   92 assignment_ops: T_ASOP
   93               | T_AS_PE
   94               | T_AS_SE
   95               | T_AS_MULE
   96               | T_AS_DIVE

   97 arithmetic_ops: '+'
   98               | '*'
   99               | '/'
  100               | '-'
  101               | '%'

  102 relational_ops: T_SINGLEEQ
  103               | '>'
  104               | '<'
  105               | T_REL_LE
  106               | T_REL_GE
  107               | T_REL_NE

  108 boolean_ops: T_BOOL_AND
  109            | T_BOOL_OR
  110            | T_BOOL_NOT

  111 bitwise_ops: '&'
  112            | '|'
  113            | '~'
  114            | '!'
  115            | T_BIT_LS
  116            | T_BIT_RS

  117 some_numeric_type: T_INTVAL
  118                  | T_FLOATVAL

  119 epsilon: %empty


Terminals, with rules where they appear

$end (0) 0
'!' (33) 114
'%' (37) 101
'&' (38) 111
'(' (40) 39 46 63 75 85
')' (41) 39 46 63 75 85
'*' (42) 98
'+' (43) 97
',' (44) 7 28 31 53
'-' (45) 100
'.' (46) 2
'/' (47) 99
':' (58) 23 40 41 44 46 49
';' (59) 3 5 11 12 18 23 37 39 41 44 46 51 75 76
'<' (60) 104
'>' (62) 103
'|' (124) 112
'~' (126) 113
error (256)
T_USES (258) 5
T_WHILE (259) 71
T_PROGRAM (260) 3
T_VAR (261) 20
T_TYPE (262) 14
T_IF (263) 63
T_THEN (264) 63
T_ELSE (265) 67 68
T_BEGIN (266) 55
T_END (267) 55
T_CONST (268) 9
T_WRITELN (269) 75
T_PROCEDURE (270) 37 39
T_FUNCTION (271) 44 46
T_FOR (272) 72
T_DO (273) 71 72
T_TO (274) 73
T_DOWNTO (275) 74
T_BOOL_AND (276) 108
T_BOOL_OR (277) 109
T_BOOL_NOT (278) 110
T_REL_LE (279) 105
T_REL_GE (280) 106
T_REL_NE (281) 107
T_SINGLEEQ (282) 11 12 18 102
T_BIT_LS (283) 115
T_BIT_RS (284) 116
T_ASOP (285) 72 92
T_AS_PE (286) 93
T_AS_SE (287) 94
T_AS_MULE (288) 95
T_AS_DIVE (289) 96
T_ARRAY (290)
T_IDENTIFIER (291) 3 5 7 11 12 18 23 26 28 31 37 39 40 41 44 46 49
    53 72 78 83
T_DATATYPE (292) 18 25 40 41 44 46 49
T_INTVAL (293) 79 117
T_FLOATVAL (294) 80 118
T_BOOLVAL (295) 81
T_STRINGVAL (296) 75 82


Nonterminals, with rules where they appear

$accept (59)
    on left: 0
startPascal (60)
    on left: 1, on right: 0
program (61)
    on left: 2, on right: 1
prog_heading (62)
    on left: 3, on right: 2
block (63)
    on left: 4, on right: 2 37 39 44 46
uses_block (64)
    on left: 5 6, on right: 4
more_libs (65)
    on left: 7 8, on right: 5 7
constant_block (66)
    on left: 9 10, on right: 4
const_definition (67)
    on left: 11, on right: 9
more_const_definition (68)
    on left: 12 13, on right: 11 12
type_block (69)
    on left: 14 15, on right: 4
type_definition (70)
    on left: 18 19, on right: 14 18
$@1 (71)
    on left: 16, on right: 18
$@2 (72)
    on left: 17, on right: 18
variable_block (73)
    on left: 20 21, on right: 4
variable_declaration (74)
    on left: 23 24, on right: 20 23
$@3 (75)
    on left: 22, on right: 23
data_type (76)
    on left: 25 26, on right: 23
more_type_identifiers (77)
    on left: 28 29, on right: 18 28
$@4 (78)
    on left: 27, on right: 28
more_var_identifiers (79)
    on left: 31 32, on right: 23 31
$@5 (80)
    on left: 30, on right: 31
function_and_procedure_block (81)
    on left: 33 34 35, on right: 4 33 34
procedure_block (82)
    on left: 37 39, on right: 34
$@6 (83)
    on left: 36, on right: 37
$@7 (84)
    on left: 38, on right: 39
param_list (85)
    on left: 40 41 42, on right: 39 41
function_block (86)
    on left: 44 46, on right: 33
$@8 (87)
    on left: 43, on right: 44
$@9 (88)
    on left: 45, on right: 46
function_param_list (89)
    on left: 49, on right: 46 51
$@10 (90)
    on left: 47, on right: 49
$@11 (91)
    on left: 48, on right: 49
function_param_continue (92)
    on left: 50 51, on right: 49
more_func_identifiers (93)
    on left: 53 54, on right: 49 53
$@12 (94)
    on left: 52, on right: 53
execution_block (95)
    on left: 55, on right: 4
execution_body (96)
    on left: 56 57, on right: 55 56 63 68
statements (97)
    on left: 58 59 60, on right: 56 71 72
structured_statements (98)
    on left: 61 62, on right: 60
conditional_statement (99)
    on left: 63, on right: 61 67
if_then_follow (100)
    on left: 64 65 66, on right: 63
else_if_block (101)
    on left: 67, on right: 64
else_block (102)
    on left: 68, on right: 65
repetitive_statement (103)
    on left: 69 70, on right: 62
while_statement (104)
    on left: 71, on right: 70
for_statement (105)
    on left: 72, on right: 69
for_list (106)
    on left: 73 74, on right: 72
print_statements (107)
    on left: 75, on right: 59
assignment_statements (108)
    on left: 76 77, on right: 58 76
assignment_statement (109)
    on left: 78, on right: 76
value (110)
    on left: 79 80 81 82, on right: 84
expression (111)
    on left: 83 84 85 86, on right: 71 73 74 78 85 86 87
boolean_expression (112)
    on left: 87, on right: 63
operator (113)
    on left: 88 89 90 91, on right: 86
assignment_ops (114)
    on left: 92 93 94 95 96, on right: 78
arithmetic_ops (115)
    on left: 97 98 99 100 101, on right: 88
relational_ops (116)
    on left: 102 103 104 105 106 107, on right: 87 89
boolean_ops (117)
    on left: 108 109 110, on right: 90
bitwise_ops (118)
    on left: 111 112 113 114 115 116, on right: 91
some_numeric_type (119)
    on left: 117 118, on right: 11 12
epsilon (120)
    on left: 119, on right: 6 8 10 13 15 19 21 24 29 32 35 42 50 54
    57 66 77


State 0

    0 $accept: . startPascal $end

    T_PROGRAM  shift, and go to state 1

    startPascal   go to state 2
    program       go to state 3
    prog_heading  go to state 4


State 1

    3 prog_heading: T_PROGRAM . T_IDENTIFIER ';'

    T_IDENTIFIER  shift, and go to state 5


State 2

    0 $accept: startPascal . $end

    $end  shift, and go to state 6


State 3

    1 startPascal: program .

    $default  reduce using rule 1 (startPascal)


State 4

    2 program: prog_heading . block '.'

    T_USES  shift, and go to state 7

    $default  reduce using rule 119 (epsilon)

    block       go to state 8
    uses_block  go to state 9
    epsilon     go to state 10


State 5

    3 prog_heading: T_PROGRAM T_IDENTIFIER . ';'

    ';'  shift, and go to state 11


State 6

    0 $accept: startPascal $end .

    $default  accept


State 7

    5 uses_block: T_USES . T_IDENTIFIER more_libs ';'

    T_IDENTIFIER  shift, and go to state 12


State 8

    2 program: prog_heading block . '.'

    '.'  shift, and go to state 13


State 9

    4 block: uses_block . constant_block type_block variable_block function_and_procedure_block execution_block

    T_CONST  shift, and go to state 14

    $default  reduce using rule 119 (epsilon)

    constant_block  go to state 15
    epsilon         go to state 16


State 10

    6 uses_block: epsilon .

    $default  reduce using rule 6 (uses_block)


State 11

    3 prog_heading: T_PROGRAM T_IDENTIFIER ';' .

    $default  reduce using rule 3 (prog_heading)


State 12

    5 uses_block: T_USES T_IDENTIFIER . more_libs ';'

    ','  shift, and go to state 17

    $default  reduce using rule 119 (epsilon)

    more_libs  go to state 18
    epsilon    go to state 19


State 13

    2 program: prog_heading block '.' .

    $default  reduce using rule 2 (program)


State 14

    9 constant_block: T_CONST . const_definition

    T_IDENTIFIER  shift, and go to state 20

    const_definition  go to state 21


State 15

    4 block: uses_block constant_block . type_block variable_block function_and_procedure_block execution_block

    T_TYPE  shift, and go to state 22

    $default  reduce using rule 119 (epsilon)

    type_block  go to state 23
    epsilon     go to state 24


State 16

   10 constant_block: epsilon .

    $default  reduce using rule 10 (constant_block)


State 17

    7 more_libs: ',' . T_IDENTIFIER more_libs

    T_IDENTIFIER  shift, and go to state 25


State 18

    5 uses_block: T_USES T_IDENTIFIER more_libs . ';'

    ';'  shift, and go to state 26


State 19

    8 more_libs: epsilon .

    $default  reduce using rule 8 (more_libs)


State 20

   11 const_definition: T_IDENTIFIER . T_SINGLEEQ some_numeric_type ';' more_const_definition

    T_SINGLEEQ  shift, and go to state 27


State 21

    9 constant_block: T_CONST const_definition .

    $default  reduce using rule 9 (constant_block)


State 22

   14 type_block: T_TYPE . type_definition

    T_IDENTIFIER  shift, and go to state 28

    $default  reduce using rule 119 (epsilon)

    type_definition  go to state 29
    epsilon          go to state 30


State 23

    4 block: uses_block constant_block type_block . variable_block function_and_procedure_block execution_block

    T_VAR  shift, and go to state 31

    $default  reduce using rule 119 (epsilon)

    variable_block  go to state 32
    epsilon         go to state 33


State 24

   15 type_block: epsilon .

    $default  reduce using rule 15 (type_block)


State 25

    7 more_libs: ',' T_IDENTIFIER . more_libs

    ','  shift, and go to state 17

    $default  reduce using rule 119 (epsilon)

    more_libs  go to state 34
    epsilon    go to state 19


State 26

    5 uses_block: T_USES T_IDENTIFIER more_libs ';' .

    $default  reduce using rule 5 (uses_block)


State 27

   11 const_definition: T_IDENTIFIER T_SINGLEEQ . some_numeric_type ';' more_const_definition

    T_INTVAL    shift, and go to state 35
    T_FLOATVAL  shift, and go to state 36

    some_numeric_type  go to state 37


State 28

   18 type_definition: T_IDENTIFIER . $@1 more_type_identifiers T_SINGLEEQ T_DATATYPE $@2 ';' type_definition

    $default  reduce using rule 16 ($@1)

    $@1  go to state 38


State 29

   14 type_block: T_TYPE type_definition .

    $default  reduce using rule 14 (type_block)


State 30

   19 type_definition: epsilon .

    $default  reduce using rule 19 (type_definition)


State 31

   20 variable_block: T_VAR . variable_declaration

    T_IDENTIFIER  shift, and go to state 39

    $default  reduce using rule 119 (epsilon)

    variable_declaration  go to state 40
    epsilon               go to state 41


State 32

    4 block: uses_block constant_block type_block variable_block . function_and_procedure_block execution_block

    T_PROCEDURE  shift, and go to state 42
    T_FUNCTION   shift, and go to state 43

    $default  reduce using rule 119 (epsilon)

    function_and_procedure_block  go to state 44
    procedure_block               go to state 45
    function_block                go to state 46
    epsilon                       go to state 47


State 33

   21 variable_block: epsilon .

    $default  reduce using rule 21 (variable_block)


State 34

    7 more_libs: ',' T_IDENTIFIER more_libs .

    $default  reduce using rule 7 (more_libs)


State 35

  117 some_numeric_type: T_INTVAL .

    $default  reduce using rule 117 (some_numeric_type)


State 36

  118 some_numeric_type: T_FLOATVAL .

    $default  reduce using rule 118 (some_numeric_type)


State 37

   11 const_definition: T_IDENTIFIER T_SINGLEEQ some_numeric_type . ';' more_const_definition

    ';'  shift, and go to state 48


State 38

   18 type_definition: T_IDENTIFIER $@1 . more_type_identifiers T_SINGLEEQ T_DATATYPE $@2 ';' type_definition

    ','  shift, and go to state 49

    $default  reduce using rule 119 (epsilon)

    more_type_identifiers  go to state 50
    epsilon                go to state 51


State 39

   23 variable_declaration: T_IDENTIFIER . $@3 more_var_identifiers ':' data_type ';' variable_declaration

    $default  reduce using rule 22 ($@3)

    $@3  go to state 52


State 40

   20 variable_block: T_VAR variable_declaration .

    $default  reduce using rule 20 (variable_block)


State 41

   24 variable_declaration: epsilon .

    $default  reduce using rule 24 (variable_declaration)


State 42

   37 procedure_block: T_PROCEDURE . T_IDENTIFIER $@6 ';' block ';'
   39                | T_PROCEDURE . T_IDENTIFIER $@7 '(' param_list ')' ';' block ';'

    T_IDENTIFIER  shift, and go to state 53


State 43

   44 function_block: T_FUNCTION . T_IDENTIFIER $@8 ':' T_DATATYPE ';' block ';'
   46               | T_FUNCTION . T_IDENTIFIER $@9 '(' function_param_list ')' ':' T_DATATYPE ';' block ';'

    T_IDENTIFIER  shift, and go to state 54


State 44

    4 block: uses_block constant_block type_block variable_block function_and_procedure_block . execution_block

    T_BEGIN  shift, and go to state 55

    execution_block  go to state 56


State 45

   34 function_and_procedure_block: procedure_block . function_and_procedure_block

    T_PROCEDURE  shift, and go to state 42
    T_FUNCTION   shift, and go to state 43

    $default  reduce using rule 119 (epsilon)

    function_and_procedure_block  go to state 57
    procedure_block               go to state 45
    function_block                go to state 46
    epsilon                       go to state 47


State 46

   33 function_and_procedure_block: function_block . function_and_procedure_block

    T_PROCEDURE  shift, and go to state 42
    T_FUNCTION   shift, and go to state 43

    $default  reduce using rule 119 (epsilon)

    function_and_procedure_block  go to state 58
    procedure_block               go to state 45
    function_block                go to state 46
    epsilon                       go to state 47


State 47

   35 function_and_procedure_block: epsilon .

    $default  reduce using rule 35 (function_and_procedure_block)


State 48

   11 const_definition: T_IDENTIFIER T_SINGLEEQ some_numeric_type ';' . more_const_definition

    T_IDENTIFIER  shift, and go to state 59

    $default  reduce using rule 119 (epsilon)

    more_const_definition  go to state 60
    epsilon                go to state 61


State 49

   28 more_type_identifiers: ',' . T_IDENTIFIER $@4 more_type_identifiers

    T_IDENTIFIER  shift, and go to state 62


State 50

   18 type_definition: T_IDENTIFIER $@1 more_type_identifiers . T_SINGLEEQ T_DATATYPE $@2 ';' type_definition

    T_SINGLEEQ  shift, and go to state 63


State 51

   29 more_type_identifiers: epsilon .

    $default  reduce using rule 29 (more_type_identifiers)


State 52

   23 variable_declaration: T_IDENTIFIER $@3 . more_var_identifiers ':' data_type ';' variable_declaration

    ','  shift, and go to state 64

    $default  reduce using rule 119 (epsilon)

    more_var_identifiers  go to state 65
    epsilon               go to state 66


State 53

   37 procedure_block: T_PROCEDURE T_IDENTIFIER . $@6 ';' block ';'
   39                | T_PROCEDURE T_IDENTIFIER . $@7 '(' param_list ')' ';' block ';'

    '('       reduce using rule 38 ($@7)
    $default  reduce using rule 36 ($@6)

    $@6  go to state 67
    $@7  go to state 68


State 54

   44 function_block: T_FUNCTION T_IDENTIFIER . $@8 ':' T_DATATYPE ';' block ';'
   46               | T_FUNCTION T_IDENTIFIER . $@9 '(' function_param_list ')' ':' T_DATATYPE ';' block ';'

    '('       reduce using rule 45 ($@9)
    $default  reduce using rule 43 ($@8)

    $@8  go to state 69
    $@9  go to state 70


State 55

   55 execution_block: T_BEGIN . execution_body T_END

    $default  reduce using rule 119 (epsilon)

    execution_body  go to state 71
    epsilon         go to state 72


State 56

    4 block: uses_block constant_block type_block variable_block function_and_procedure_block execution_block .

    $default  reduce using rule 4 (block)


State 57

   34 function_and_procedure_block: procedure_block function_and_procedure_block .

    $default  reduce using rule 34 (function_and_procedure_block)


State 58

   33 function_and_procedure_block: function_block function_and_procedure_block .

    $default  reduce using rule 33 (function_and_procedure_block)


State 59

   12 more_const_definition: T_IDENTIFIER . T_SINGLEEQ some_numeric_type ';' more_const_definition

    T_SINGLEEQ  shift, and go to state 73


State 60

   11 const_definition: T_IDENTIFIER T_SINGLEEQ some_numeric_type ';' more_const_definition .

    $default  reduce using rule 11 (const_definition)


State 61

   13 more_const_definition: epsilon .

    $default  reduce using rule 13 (more_const_definition)


State 62

   28 more_type_identifiers: ',' T_IDENTIFIER . $@4 more_type_identifiers

    $default  reduce using rule 27 ($@4)

    $@4  go to state 74


State 63

   18 type_definition: T_IDENTIFIER $@1 more_type_identifiers T_SINGLEEQ . T_DATATYPE $@2 ';' type_definition

    T_DATATYPE  shift, and go to state 75


State 64

   31 more_var_identifiers: ',' . T_IDENTIFIER $@5 more_var_identifiers

    T_IDENTIFIER  shift, and go to state 76


State 65

   23 variable_declaration: T_IDENTIFIER $@3 more_var_identifiers . ':' data_type ';' variable_declaration

    ':'  shift, and go to state 77


State 66

   32 more_var_identifiers: epsilon .

    $default  reduce using rule 32 (more_var_identifiers)


State 67

   37 procedure_block: T_PROCEDURE T_IDENTIFIER $@6 . ';' block ';'

    ';'  shift, and go to state 78


State 68

   39 procedure_block: T_PROCEDURE T_IDENTIFIER $@7 . '(' param_list ')' ';' block ';'

    '('  shift, and go to state 79


State 69

   44 function_block: T_FUNCTION T_IDENTIFIER $@8 . ':' T_DATATYPE ';' block ';'

    ':'  shift, and go to state 80


State 70

   46 function_block: T_FUNCTION T_IDENTIFIER $@9 . '(' function_param_list ')' ':' T_DATATYPE ';' block ';'

    '('  shift, and go to state 81


State 71

   55 execution_block: T_BEGIN execution_body . T_END
   56 execution_body: execution_body . statements

    T_WHILE       shift, and go to state 82
    T_IF          shift, and go to state 83
    T_END         shift, and go to state 84
    T_WRITELN     shift, and go to state 85
    T_FOR         shift, and go to state 86
    T_IDENTIFIER  shift, and go to state 87

    T_WHILE       [reduce using rule 119 (epsilon)]
    T_IF          [reduce using rule 119 (epsilon)]
    T_END         [reduce using rule 119 (epsilon)]
    T_WRITELN     [reduce using rule 119 (epsilon)]
    T_FOR         [reduce using rule 119 (epsilon)]
    T_IDENTIFIER  [reduce using rule 119 (epsilon)]

    statements             go to state 88
    structured_statements  go to state 89
    conditional_statement  go to state 90
    repetitive_statement   go to state 91
    while_statement        go to state 92
    for_statement          go to state 93
    print_statements       go to state 94
    assignment_statements  go to state 95
    assignment_statement   go to state 96
    epsilon                go to state 97


State 72

   57 execution_body: epsilon .

    $default  reduce using rule 57 (execution_body)


State 73

   12 more_const_definition: T_IDENTIFIER T_SINGLEEQ . some_numeric_type ';' more_const_definition

    T_INTVAL    shift, and go to state 35
    T_FLOATVAL  shift, and go to state 36

    some_numeric_type  go to state 98


State 74

   28 more_type_identifiers: ',' T_IDENTIFIER $@4 . more_type_identifiers

    ','  shift, and go to state 49

    $default  reduce using rule 119 (epsilon)

    more_type_identifiers  go to state 99
    epsilon                go to state 51


State 75

   18 type_definition: T_IDENTIFIER $@1 more_type_identifiers T_SINGLEEQ T_DATATYPE . $@2 ';' type_definition

    $default  reduce using rule 17 ($@2)

    $@2  go to state 100


State 76

   31 more_var_identifiers: ',' T_IDENTIFIER . $@5 more_var_identifiers

    $default  reduce using rule 30 ($@5)

    $@5  go to state 101


State 77

   23 variable_declaration: T_IDENTIFIER $@3 more_var_identifiers ':' . data_type ';' variable_declaration

    T_IDENTIFIER  shift, and go to state 102
    T_DATATYPE    shift, and go to state 103

    data_type  go to state 104


State 78

   37 procedure_block: T_PROCEDURE T_IDENTIFIER $@6 ';' . block ';'

    T_USES  shift, and go to state 7

    $default  reduce using rule 119 (epsilon)

    block       go to state 105
    uses_block  go to state 9
    epsilon     go to state 10


State 79

   39 procedure_block: T_PROCEDURE T_IDENTIFIER $@7 '(' . param_list ')' ';' block ';'

    T_IDENTIFIER  shift, and go to state 106

    $default  reduce using rule 119 (epsilon)

    param_list  go to state 107
    epsilon     go to state 108


State 80

   44 function_block: T_FUNCTION T_IDENTIFIER $@8 ':' . T_DATATYPE ';' block ';'

    T_DATATYPE  shift, and go to state 109


State 81

   46 function_block: T_FUNCTION T_IDENTIFIER $@9 '(' . function_param_list ')' ':' T_DATATYPE ';' block ';'

    T_IDENTIFIER  shift, and go to state 110

    function_param_list  go to state 111


State 82

   71 while_statement: T_WHILE . expression T_DO statements

    T_IDENTIFIER  shift, and go to state 112
    T_INTVAL      shift, and go to state 113
    T_FLOATVAL    shift, and go to state 114
    T_BOOLVAL     shift, and go to state 115
    T_STRINGVAL   shift, and go to state 116
    '('           shift, and go to state 117

    value       go to state 118
    expression  go to state 119


State 83

   63 conditional_statement: T_IF . '(' boolean_expression ')' T_THEN execution_body if_then_follow

    '('  shift, and go to state 120


State 84

   55 execution_block: T_BEGIN execution_body T_END .

    $default  reduce using rule 55 (execution_block)


State 85

   75 print_statements: T_WRITELN . '(' T_STRINGVAL ')' ';'

    '('  shift, and go to state 121


State 86

   72 for_statement: T_FOR . T_IDENTIFIER T_ASOP for_list T_DO statements

    T_IDENTIFIER  shift, and go to state 122


State 87

   78 assignment_statement: T_IDENTIFIER . assignment_ops expression

    T_ASOP     shift, and go to state 123
    T_AS_PE    shift, and go to state 124
    T_AS_SE    shift, and go to state 125
    T_AS_MULE  shift, and go to state 126
    T_AS_DIVE  shift, and go to state 127

    assignment_ops  go to state 128


State 88

   56 execution_body: execution_body statements .

    $default  reduce using rule 56 (execution_body)


State 89

   60 statements: structured_statements .

    $default  reduce using rule 60 (statements)


State 90

   61 structured_statements: conditional_statement .

    $default  reduce using rule 61 (structured_statements)


State 91

   62 structured_statements: repetitive_statement .

    $default  reduce using rule 62 (structured_statements)


State 92

   70 repetitive_statement: while_statement .

    $default  reduce using rule 70 (repetitive_statement)


State 93

   69 repetitive_statement: for_statement .

    $default  reduce using rule 69 (repetitive_statement)


State 94

   59 statements: print_statements .

    $default  reduce using rule 59 (statements)


State 95

   58 statements: assignment_statements .

    $default  reduce using rule 58 (statements)


State 96

   76 assignment_statements: assignment_statement . ';' assignment_statements

    ';'  shift, and go to state 129


State 97

   77 assignment_statements: epsilon .

    $default  reduce using rule 77 (assignment_statements)


State 98

   12 more_const_definition: T_IDENTIFIER T_SINGLEEQ some_numeric_type . ';' more_const_definition

    ';'  shift, and go to state 130


State 99

   28 more_type_identifiers: ',' T_IDENTIFIER $@4 more_type_identifiers .

    $default  reduce using rule 28 (more_type_identifiers)


State 100

   18 type_definition: T_IDENTIFIER $@1 more_type_identifiers T_SINGLEEQ T_DATATYPE $@2 . ';' type_definition

    ';'  shift, and go to state 131


State 101

   31 more_var_identifiers: ',' T_IDENTIFIER $@5 . more_var_identifiers

    ','  shift, and go to state 64

    $default  reduce using rule 119 (epsilon)

    more_var_identifiers  go to state 132
    epsilon               go to state 66


State 102

   26 data_type: T_IDENTIFIER .

    $default  reduce using rule 26 (data_type)


State 103

   25 data_type: T_DATATYPE .

    $default  reduce using rule 25 (data_type)


State 104

   23 variable_declaration: T_IDENTIFIER $@3 more_var_identifiers ':' data_type . ';' variable_declaration

    ';'  shift, and go to state 133


State 105

   37 procedure_block: T_PROCEDURE T_IDENTIFIER $@6 ';' block . ';'

    ';'  shift, and go to state 134


State 106

   40 param_list: T_IDENTIFIER . ':' T_DATATYPE
   41           | T_IDENTIFIER . ':' T_DATATYPE ';' param_list

    ':'  shift, and go to state 135


State 107

   39 procedure_block: T_PROCEDURE T_IDENTIFIER $@7 '(' param_list . ')' ';' block ';'

    ')'  shift, and go to state 136


State 108

   42 param_list: epsilon .

    $default  reduce using rule 42 (param_list)


State 109

   44 function_block: T_FUNCTION T_IDENTIFIER $@8 ':' T_DATATYPE . ';' block ';'

    ';'  shift, and go to state 137


State 110

   49 function_param_list: T_IDENTIFIER . $@10 more_func_identifiers ':' T_DATATYPE $@11 function_param_continue

    $default  reduce using rule 47 ($@10)

    $@10  go to state 138


State 111

   46 function_block: T_FUNCTION T_IDENTIFIER $@9 '(' function_param_list . ')' ':' T_DATATYPE ';' block ';'

    ')'  shift, and go to state 139


State 112

   83 expression: T_IDENTIFIER .

    $default  reduce using rule 83 (expression)


State 113

   79 value: T_INTVAL .

    $default  reduce using rule 79 (value)


State 114

   80 value: T_FLOATVAL .

    $default  reduce using rule 80 (value)


State 115

   81 value: T_BOOLVAL .

    $default  reduce using rule 81 (value)


State 116

   82 value: T_STRINGVAL .

    $default  reduce using rule 82 (value)


State 117

   85 expression: '(' . expression ')'

    T_IDENTIFIER  shift, and go to state 112
    T_INTVAL      shift, and go to state 113
    T_FLOATVAL    shift, and go to state 114
    T_BOOLVAL     shift, and go to state 115
    T_STRINGVAL   shift, and go to state 116
    '('           shift, and go to state 117

    value       go to state 118
    expression  go to state 140


State 118

   84 expression: value .

    $default  reduce using rule 84 (expression)


State 119

   71 while_statement: T_WHILE expression . T_DO statements
   86 expression: expression . operator expression

    T_DO        shift, and go to state 141
    T_BOOL_AND  shift, and go to state 142
    T_BOOL_OR   shift, and go to state 143
    T_BOOL_NOT  shift, and go to state 144
    T_REL_LE    shift, and go to state 145
    T_REL_GE    shift, and go to state 146
    T_REL_NE    shift, and go to state 147
    T_SINGLEEQ  shift, and go to state 148
    T_BIT_LS    shift, and go to state 149
    T_BIT_RS    shift, and go to state 150
    '+'         shift, and go to state 151
    '*'         shift, and go to state 152
    '/'         shift, and go to state 153
    '-'         shift, and go to state 154
    '%'         shift, and go to state 155
    '>'         shift, and go to state 156
    '<'         shift, and go to state 157
    '&'         shift, and go to state 158
    '|'         shift, and go to state 159
    '~'         shift, and go to state 160
    '!'         shift, and go to state 161

    operator        go to state 162
    arithmetic_ops  go to state 163
    relational_ops  go to state 164
    boolean_ops     go to state 165
    bitwise_ops     go to state 166


State 120

   63 conditional_statement: T_IF '(' . boolean_expression ')' T_THEN execution_body if_then_follow

    T_IDENTIFIER  shift, and go to state 112
    T_INTVAL      shift, and go to state 113
    T_FLOATVAL    shift, and go to state 114
    T_BOOLVAL     shift, and go to state 115
    T_STRINGVAL   shift, and go to state 116
    '('           shift, and go to state 117

    value               go to state 118
    expression          go to state 167
    boolean_expression  go to state 168


State 121

   75 print_statements: T_WRITELN '(' . T_STRINGVAL ')' ';'

    T_STRINGVAL  shift, and go to state 169


State 122

   72 for_statement: T_FOR T_IDENTIFIER . T_ASOP for_list T_DO statements

    T_ASOP  shift, and go to state 170


State 123

   92 assignment_ops: T_ASOP .

    $default  reduce using rule 92 (assignment_ops)


State 124

   93 assignment_ops: T_AS_PE .

    $default  reduce using rule 93 (assignment_ops)


State 125

   94 assignment_ops: T_AS_SE .

    $default  reduce using rule 94 (assignment_ops)


State 126

   95 assignment_ops: T_AS_MULE .

    $default  reduce using rule 95 (assignment_ops)


State 127

   96 assignment_ops: T_AS_DIVE .

    $default  reduce using rule 96 (assignment_ops)


State 128

   78 assignment_statement: T_IDENTIFIER assignment_ops . expression

    T_IDENTIFIER  shift, and go to state 112
    T_INTVAL      shift, and go to state 113
    T_FLOATVAL    shift, and go to state 114
    T_BOOLVAL     shift, and go to state 115
    T_STRINGVAL   shift, and go to state 116
    '('           shift, and go to state 117

    value       go to state 118
    expression  go to state 171


State 129

   76 assignment_statements: assignment_statement ';' . assignment_statements

    T_IDENTIFIER  shift, and go to state 87

    T_IDENTIFIER  [reduce using rule 119 (epsilon)]
    $default      reduce using rule 119 (epsilon)

    assignment_statements  go to state 172
    assignment_statement   go to state 96
    epsilon                go to state 97


State 130

   12 more_const_definition: T_IDENTIFIER T_SINGLEEQ some_numeric_type ';' . more_const_definition

    T_IDENTIFIER  shift, and go to state 59

    $default  reduce using rule 119 (epsilon)

    more_const_definition  go to state 173
    epsilon                go to state 61


State 131

   18 type_definition: T_IDENTIFIER $@1 more_type_identifiers T_SINGLEEQ T_DATATYPE $@2 ';' . type_definition

    T_IDENTIFIER  shift, and go to state 28

    $default  reduce using rule 119 (epsilon)

    type_definition  go to state 174
    epsilon          go to state 30


State 132

   31 more_var_identifiers: ',' T_IDENTIFIER $@5 more_var_identifiers .

    $default  reduce using rule 31 (more_var_identifiers)


State 133

   23 variable_declaration: T_IDENTIFIER $@3 more_var_identifiers ':' data_type ';' . variable_declaration

    T_IDENTIFIER  shift, and go to state 39

    $default  reduce using rule 119 (epsilon)

    variable_declaration  go to state 175
    epsilon               go to state 41


State 134

   37 procedure_block: T_PROCEDURE T_IDENTIFIER $@6 ';' block ';' .

    $default  reduce using rule 37 (procedure_block)


State 135

   40 param_list: T_IDENTIFIER ':' . T_DATATYPE
   41           | T_IDENTIFIER ':' . T_DATATYPE ';' param_list

    T_DATATYPE  shift, and go to state 176


State 136

   39 procedure_block: T_PROCEDURE T_IDENTIFIER $@7 '(' param_list ')' . ';' block ';'

    ';'  shift, and go to state 177


State 137

   44 function_block: T_FUNCTION T_IDENTIFIER $@8 ':' T_DATATYPE ';' . block ';'

    T_USES  shift, and go to state 7

    $default  reduce using rule 119 (epsilon)

    block       go to state 178
    uses_block  go to state 9
    epsilon     go to state 10


State 138

   49 function_param_list: T_IDENTIFIER $@10 . more_func_identifiers ':' T_DATATYPE $@11 function_param_continue

    ','  shift, and go to state 179

    $default  reduce using rule 119 (epsilon)

    more_func_identifiers  go to state 180
    epsilon                go to state 181


State 139

   46 function_block: T_FUNCTION T_IDENTIFIER $@9 '(' function_param_list ')' . ':' T_DATATYPE ';' block ';'

    ':'  shift, and go to state 182


State 140

   85 expression: '(' expression . ')'
   86           | expression . operator expression

    T_BOOL_AND  shift, and go to state 142
    T_BOOL_OR   shift, and go to state 143
    T_BOOL_NOT  shift, and go to state 144
    T_REL_LE    shift, and go to state 145
    T_REL_GE    shift, and go to state 146
    T_REL_NE    shift, and go to state 147
    T_SINGLEEQ  shift, and go to state 148
    T_BIT_LS    shift, and go to state 149
    T_BIT_RS    shift, and go to state 150
    ')'         shift, and go to state 183
    '+'         shift, and go to state 151
    '*'         shift, and go to state 152
    '/'         shift, and go to state 153
    '-'         shift, and go to state 154
    '%'         shift, and go to state 155
    '>'         shift, and go to state 156
    '<'         shift, and go to state 157
    '&'         shift, and go to state 158
    '|'         shift, and go to state 159
    '~'         shift, and go to state 160
    '!'         shift, and go to state 161

    operator        go to state 162
    arithmetic_ops  go to state 163
    relational_ops  go to state 164
    boolean_ops     go to state 165
    bitwise_ops     go to state 166


State 141

   71 while_statement: T_WHILE expression T_DO . statements

    T_WHILE       shift, and go to state 82
    T_IF          shift, and go to state 83
    T_WRITELN     shift, and go to state 85
    T_FOR         shift, and go to state 86
    T_IDENTIFIER  shift, and go to state 87

    T_WHILE       [reduce using rule 119 (epsilon)]
    T_IF          [reduce using rule 119 (epsilon)]
    T_WRITELN     [reduce using rule 119 (epsilon)]
    T_FOR         [reduce using rule 119 (epsilon)]
    T_IDENTIFIER  [reduce using rule 119 (epsilon)]
    $default      reduce using rule 119 (epsilon)

    statements             go to state 184
    structured_statements  go to state 89
    conditional_statement  go to state 90
    repetitive_statement   go to state 91
    while_statement        go to state 92
    for_statement          go to state 93
    print_statements       go to state 94
    assignment_statements  go to state 95
    assignment_statement   go to state 96
    epsilon                go to state 97


State 142

  108 boolean_ops: T_BOOL_AND .

    $default  reduce using rule 108 (boolean_ops)


State 143

  109 boolean_ops: T_BOOL_OR .

    $default  reduce using rule 109 (boolean_ops)


State 144

  110 boolean_ops: T_BOOL_NOT .

    $default  reduce using rule 110 (boolean_ops)


State 145

  105 relational_ops: T_REL_LE .

    $default  reduce using rule 105 (relational_ops)


State 146

  106 relational_ops: T_REL_GE .

    $default  reduce using rule 106 (relational_ops)


State 147

  107 relational_ops: T_REL_NE .

    $default  reduce using rule 107 (relational_ops)


State 148

  102 relational_ops: T_SINGLEEQ .

    $default  reduce using rule 102 (relational_ops)


State 149

  115 bitwise_ops: T_BIT_LS .

    $default  reduce using rule 115 (bitwise_ops)


State 150

  116 bitwise_ops: T_BIT_RS .

    $default  reduce using rule 116 (bitwise_ops)


State 151

   97 arithmetic_ops: '+' .

    $default  reduce using rule 97 (arithmetic_ops)


State 152

   98 arithmetic_ops: '*' .

    $default  reduce using rule 98 (arithmetic_ops)


State 153

   99 arithmetic_ops: '/' .

    $default  reduce using rule 99 (arithmetic_ops)


State 154

  100 arithmetic_ops: '-' .

    $default  reduce using rule 100 (arithmetic_ops)


State 155

  101 arithmetic_ops: '%' .

    $default  reduce using rule 101 (arithmetic_ops)


State 156

  103 relational_ops: '>' .

    $default  reduce using rule 103 (relational_ops)


State 157

  104 relational_ops: '<' .

    $default  reduce using rule 104 (relational_ops)


State 158

  111 bitwise_ops: '&' .

    $default  reduce using rule 111 (bitwise_ops)


State 159

  112 bitwise_ops: '|' .

    $default  reduce using rule 112 (bitwise_ops)


State 160

  113 bitwise_ops: '~' .

    $default  reduce using rule 113 (bitwise_ops)


State 161

  114 bitwise_ops: '!' .

    $default  reduce using rule 114 (bitwise_ops)


State 162

   86 expression: expression operator . expression

    T_IDENTIFIER  shift, and go to state 112
    T_INTVAL      shift, and go to state 113
    T_FLOATVAL    shift, and go to state 114
    T_BOOLVAL     shift, and go to state 115
    T_STRINGVAL   shift, and go to state 116
    '('           shift, and go to state 117

    value       go to state 118
    expression  go to state 185


State 163

   88 operator: arithmetic_ops .

    $default  reduce using rule 88 (operator)


State 164

   89 operator: relational_ops .

    $default  reduce using rule 89 (operator)


State 165

   90 operator: boolean_ops .

    $default  reduce using rule 90 (operator)


State 166

   91 operator: bitwise_ops .

    $default  reduce using rule 91 (operator)


State 167

   86 expression: expression . operator expression
   87 boolean_expression: expression . relational_ops expression

    T_BOOL_AND  shift, and go to state 142
    T_BOOL_OR   shift, and go to state 143
    T_BOOL_NOT  shift, and go to state 144
    T_REL_LE    shift, and go to state 145
    T_REL_GE    shift, and go to state 146
    T_REL_NE    shift, and go to state 147
    T_SINGLEEQ  shift, and go to state 148
    T_BIT_LS    shift, and go to state 149
    T_BIT_RS    shift, and go to state 150
    '+'         shift, and go to state 151
    '*'         shift, and go to state 152
    '/'         shift, and go to state 153
    '-'         shift, and go to state 154
    '%'         shift, and go to state 155
    '>'         shift, and go to state 156
    '<'         shift, and go to state 157
    '&'         shift, and go to state 158
    '|'         shift, and go to state 159
    '~'         shift, and go to state 160
    '!'         shift, and go to state 161

    operator        go to state 162
    arithmetic_ops  go to state 163
    relational_ops  go to state 186
    boolean_ops     go to state 165
    bitwise_ops     go to state 166


State 168

   63 conditional_statement: T_IF '(' boolean_expression . ')' T_THEN execution_body if_then_follow

    ')'  shift, and go to state 187


State 169

   75 print_statements: T_WRITELN '(' T_STRINGVAL . ')' ';'

    ')'  shift, and go to state 188


State 170

   72 for_statement: T_FOR T_IDENTIFIER T_ASOP . for_list T_DO statements

    T_IDENTIFIER  shift, and go to state 112
    T_INTVAL      shift, and go to state 113
    T_FLOATVAL    shift, and go to state 114
    T_BOOLVAL     shift, and go to state 115
    T_STRINGVAL   shift, and go to state 116
    '('           shift, and go to state 117

    for_list    go to state 189
    value       go to state 118
    expression  go to state 190


State 171

   78 assignment_statement: T_IDENTIFIER assignment_ops expression .
   86 expression: expression . operator expression

    T_BOOL_AND  shift, and go to state 142
    T_BOOL_OR   shift, and go to state 143
    T_BOOL_NOT  shift, and go to state 144
    T_REL_LE    shift, and go to state 145
    T_REL_GE    shift, and go to state 146
    T_REL_NE    shift, and go to state 147
    T_SINGLEEQ  shift, and go to state 148
    T_BIT_LS    shift, and go to state 149
    T_BIT_RS    shift, and go to state 150
    '+'         shift, and go to state 151
    '*'         shift, and go to state 152
    '/'         shift, and go to state 153
    '-'         shift, and go to state 154
    '%'         shift, and go to state 155
    '>'         shift, and go to state 156
    '<'         shift, and go to state 157
    '&'         shift, and go to state 158
    '|'         shift, and go to state 159
    '~'         shift, and go to state 160
    '!'         shift, and go to state 161

    $default  reduce using rule 78 (assignment_statement)

    operator        go to state 162
    arithmetic_ops  go to state 163
    relational_ops  go to state 164
    boolean_ops     go to state 165
    bitwise_ops     go to state 166


State 172

   76 assignment_statements: assignment_statement ';' assignment_statements .

    $default  reduce using rule 76 (assignment_statements)


State 173

   12 more_const_definition: T_IDENTIFIER T_SINGLEEQ some_numeric_type ';' more_const_definition .

    $default  reduce using rule 12 (more_const_definition)


State 174

   18 type_definition: T_IDENTIFIER $@1 more_type_identifiers T_SINGLEEQ T_DATATYPE $@2 ';' type_definition .

    $default  reduce using rule 18 (type_definition)


State 175

   23 variable_declaration: T_IDENTIFIER $@3 more_var_identifiers ':' data_type ';' variable_declaration .

    $default  reduce using rule 23 (variable_declaration)


State 176

   40 param_list: T_IDENTIFIER ':' T_DATATYPE .
   41           | T_IDENTIFIER ':' T_DATATYPE . ';' param_list

    ';'  shift, and go to state 191

    $default  reduce using rule 40 (param_list)


State 177

   39 procedure_block: T_PROCEDURE T_IDENTIFIER $@7 '(' param_list ')' ';' . block ';'

    T_USES  shift, and go to state 7

    $default  reduce using rule 119 (epsilon)

    block       go to state 192
    uses_block  go to state 9
    epsilon     go to state 10


State 178

   44 function_block: T_FUNCTION T_IDENTIFIER $@8 ':' T_DATATYPE ';' block . ';'

    ';'  shift, and go to state 193


State 179

   53 more_func_identifiers: ',' . T_IDENTIFIER $@12 more_func_identifiers

    T_IDENTIFIER  shift, and go to state 194


State 180

   49 function_param_list: T_IDENTIFIER $@10 more_func_identifiers . ':' T_DATATYPE $@11 function_param_continue

    ':'  shift, and go to state 195


State 181

   54 more_func_identifiers: epsilon .

    $default  reduce using rule 54 (more_func_identifiers)


State 182

   46 function_block: T_FUNCTION T_IDENTIFIER $@9 '(' function_param_list ')' ':' . T_DATATYPE ';' block ';'

    T_DATATYPE  shift, and go to state 196


State 183

   85 expression: '(' expression ')' .

    $default  reduce using rule 85 (expression)


State 184

   71 while_statement: T_WHILE expression T_DO statements .

    $default  reduce using rule 71 (while_statement)


State 185

   86 expression: expression . operator expression
   86           | expression operator expression .

    T_BOOL_AND  shift, and go to state 142
    T_BOOL_OR   shift, and go to state 143
    T_BOOL_NOT  shift, and go to state 144
    T_REL_LE    shift, and go to state 145
    T_REL_GE    shift, and go to state 146
    T_REL_NE    shift, and go to state 147
    T_SINGLEEQ  shift, and go to state 148
    T_BIT_LS    shift, and go to state 149
    T_BIT_RS    shift, and go to state 150
    '+'         shift, and go to state 151
    '*'         shift, and go to state 152
    '/'         shift, and go to state 153
    '-'         shift, and go to state 154
    '%'         shift, and go to state 155
    '>'         shift, and go to state 156
    '<'         shift, and go to state 157
    '&'         shift, and go to state 158
    '|'         shift, and go to state 159
    '~'         shift, and go to state 160
    '!'         shift, and go to state 161

    T_BOOL_AND  [reduce using rule 86 (expression)]
    T_BOOL_OR   [reduce using rule 86 (expression)]
    T_BOOL_NOT  [reduce using rule 86 (expression)]
    T_REL_LE    [reduce using rule 86 (expression)]
    T_REL_GE    [reduce using rule 86 (expression)]
    T_REL_NE    [reduce using rule 86 (expression)]
    T_SINGLEEQ  [reduce using rule 86 (expression)]
    T_BIT_LS    [reduce using rule 86 (expression)]
    T_BIT_RS    [reduce using rule 86 (expression)]
    '+'         [reduce using rule 86 (expression)]
    '*'         [reduce using rule 86 (expression)]
    '/'         [reduce using rule 86 (expression)]
    '-'         [reduce using rule 86 (expression)]
    '%'         [reduce using rule 86 (expression)]
    '>'         [reduce using rule 86 (expression)]
    '<'         [reduce using rule 86 (expression)]
    '&'         [reduce using rule 86 (expression)]
    '|'         [reduce using rule 86 (expression)]
    '~'         [reduce using rule 86 (expression)]
    '!'         [reduce using rule 86 (expression)]
    $default    reduce using rule 86 (expression)

    operator        go to state 162
    arithmetic_ops  go to state 163
    relational_ops  go to state 164
    boolean_ops     go to state 165
    bitwise_ops     go to state 166


State 186

   87 boolean_expression: expression relational_ops . expression
   89 operator: relational_ops .

    T_IDENTIFIER  shift, and go to state 112
    T_INTVAL      shift, and go to state 113
    T_FLOATVAL    shift, and go to state 114
    T_BOOLVAL     shift, and go to state 115
    T_STRINGVAL   shift, and go to state 116
    '('           shift, and go to state 117

    T_IDENTIFIER  [reduce using rule 89 (operator)]
    T_INTVAL      [reduce using rule 89 (operator)]
    T_FLOATVAL    [reduce using rule 89 (operator)]
    T_BOOLVAL     [reduce using rule 89 (operator)]
    T_STRINGVAL   [reduce using rule 89 (operator)]
    '('           [reduce using rule 89 (operator)]

    value       go to state 118
    expression  go to state 197


State 187

   63 conditional_statement: T_IF '(' boolean_expression ')' . T_THEN execution_body if_then_follow

    T_THEN  shift, and go to state 198


State 188

   75 print_statements: T_WRITELN '(' T_STRINGVAL ')' . ';'

    ';'  shift, and go to state 199


State 189

   72 for_statement: T_FOR T_IDENTIFIER T_ASOP for_list . T_DO statements

    T_DO  shift, and go to state 200


State 190

   73 for_list: expression . T_TO expression
   74         | expression . T_DOWNTO expression
   86 expression: expression . operator expression

    T_TO        shift, and go to state 201
    T_DOWNTO    shift, and go to state 202
    T_BOOL_AND  shift, and go to state 142
    T_BOOL_OR   shift, and go to state 143
    T_BOOL_NOT  shift, and go to state 144
    T_REL_LE    shift, and go to state 145
    T_REL_GE    shift, and go to state 146
    T_REL_NE    shift, and go to state 147
    T_SINGLEEQ  shift, and go to state 148
    T_BIT_LS    shift, and go to state 149
    T_BIT_RS    shift, and go to state 150
    '+'         shift, and go to state 151
    '*'         shift, and go to state 152
    '/'         shift, and go to state 153
    '-'         shift, and go to state 154
    '%'         shift, and go to state 155
    '>'         shift, and go to state 156
    '<'         shift, and go to state 157
    '&'         shift, and go to state 158
    '|'         shift, and go to state 159
    '~'         shift, and go to state 160
    '!'         shift, and go to state 161

    operator        go to state 162
    arithmetic_ops  go to state 163
    relational_ops  go to state 164
    boolean_ops     go to state 165
    bitwise_ops     go to state 166


State 191

   41 param_list: T_IDENTIFIER ':' T_DATATYPE ';' . param_list

    T_IDENTIFIER  shift, and go to state 106

    $default  reduce using rule 119 (epsilon)

    param_list  go to state 203
    epsilon     go to state 108


State 192

   39 procedure_block: T_PROCEDURE T_IDENTIFIER $@7 '(' param_list ')' ';' block . ';'

    ';'  shift, and go to state 204


State 193

   44 function_block: T_FUNCTION T_IDENTIFIER $@8 ':' T_DATATYPE ';' block ';' .

    $default  reduce using rule 44 (function_block)


State 194

   53 more_func_identifiers: ',' T_IDENTIFIER . $@12 more_func_identifiers

    $default  reduce using rule 52 ($@12)

    $@12  go to state 205


State 195

   49 function_param_list: T_IDENTIFIER $@10 more_func_identifiers ':' . T_DATATYPE $@11 function_param_continue

    T_DATATYPE  shift, and go to state 206


State 196

   46 function_block: T_FUNCTION T_IDENTIFIER $@9 '(' function_param_list ')' ':' T_DATATYPE . ';' block ';'

    ';'  shift, and go to state 207


State 197

   86 expression: expression . operator expression
   87 boolean_expression: expression relational_ops expression .

    T_BOOL_AND  shift, and go to state 142
    T_BOOL_OR   shift, and go to state 143
    T_BOOL_NOT  shift, and go to state 144
    T_REL_LE    shift, and go to state 145
    T_REL_GE    shift, and go to state 146
    T_REL_NE    shift, and go to state 147
    T_SINGLEEQ  shift, and go to state 148
    T_BIT_LS    shift, and go to state 149
    T_BIT_RS    shift, and go to state 150
    '+'         shift, and go to state 151
    '*'         shift, and go to state 152
    '/'         shift, and go to state 153
    '-'         shift, and go to state 154
    '%'         shift, and go to state 155
    '>'         shift, and go to state 156
    '<'         shift, and go to state 157
    '&'         shift, and go to state 158
    '|'         shift, and go to state 159
    '~'         shift, and go to state 160
    '!'         shift, and go to state 161

    $default  reduce using rule 87 (boolean_expression)

    operator        go to state 162
    arithmetic_ops  go to state 163
    relational_ops  go to state 164
    boolean_ops     go to state 165
    bitwise_ops     go to state 166


State 198

   63 conditional_statement: T_IF '(' boolean_expression ')' T_THEN . execution_body if_then_follow

    $default  reduce using rule 119 (epsilon)

    execution_body  go to state 208
    epsilon         go to state 72


State 199

   75 print_statements: T_WRITELN '(' T_STRINGVAL ')' ';' .

    $default  reduce using rule 75 (print_statements)


State 200

   72 for_statement: T_FOR T_IDENTIFIER T_ASOP for_list T_DO . statements

    T_WHILE       shift, and go to state 82
    T_IF          shift, and go to state 83
    T_WRITELN     shift, and go to state 85
    T_FOR         shift, and go to state 86
    T_IDENTIFIER  shift, and go to state 87

    T_WHILE       [reduce using rule 119 (epsilon)]
    T_IF          [reduce using rule 119 (epsilon)]
    T_WRITELN     [reduce using rule 119 (epsilon)]
    T_FOR         [reduce using rule 119 (epsilon)]
    T_IDENTIFIER  [reduce using rule 119 (epsilon)]
    $default      reduce using rule 119 (epsilon)

    statements             go to state 209
    structured_statements  go to state 89
    conditional_statement  go to state 90
    repetitive_statement   go to state 91
    while_statement        go to state 92
    for_statement          go to state 93
    print_statements       go to state 94
    assignment_statements  go to state 95
    assignment_statement   go to state 96
    epsilon                go to state 97


State 201

   73 for_list: expression T_TO . expression

    T_IDENTIFIER  shift, and go to state 112
    T_INTVAL      shift, and go to state 113
    T_FLOATVAL    shift, and go to state 114
    T_BOOLVAL     shift, and go to state 115
    T_STRINGVAL   shift, and go to state 116
    '('           shift, and go to state 117

    value       go to state 118
    expression  go to state 210


State 202

   74 for_list: expression T_DOWNTO . expression

    T_IDENTIFIER  shift, and go to state 112
    T_INTVAL      shift, and go to state 113
    T_FLOATVAL    shift, and go to state 114
    T_BOOLVAL     shift, and go to state 115
    T_STRINGVAL   shift, and go to state 116
    '('           shift, and go to state 117

    value       go to state 118
    expression  go to state 211


State 203

   41 param_list: T_IDENTIFIER ':' T_DATATYPE ';' param_list .

    $default  reduce using rule 41 (param_list)


State 204

   39 procedure_block: T_PROCEDURE T_IDENTIFIER $@7 '(' param_list ')' ';' block ';' .

    $default  reduce using rule 39 (procedure_block)


State 205

   53 more_func_identifiers: ',' T_IDENTIFIER $@12 . more_func_identifiers

    ','  shift, and go to state 179

    $default  reduce using rule 119 (epsilon)

    more_func_identifiers  go to state 212
    epsilon                go to state 181


State 206

   49 function_param_list: T_IDENTIFIER $@10 more_func_identifiers ':' T_DATATYPE . $@11 function_param_continue

    $default  reduce using rule 48 ($@11)

    $@11  go to state 213


State 207

   46 function_block: T_FUNCTION T_IDENTIFIER $@9 '(' function_param_list ')' ':' T_DATATYPE ';' . block ';'

    T_USES  shift, and go to state 7

    $default  reduce using rule 119 (epsilon)

    block       go to state 214
    uses_block  go to state 9
    epsilon     go to state 10


State 208

   56 execution_body: execution_body . statements
   63 conditional_statement: T_IF '(' boolean_expression ')' T_THEN execution_body . if_then_follow

    T_WHILE       shift, and go to state 82
    T_IF          shift, and go to state 83
    T_ELSE        shift, and go to state 215
    T_WRITELN     shift, and go to state 85
    T_FOR         shift, and go to state 86
    T_IDENTIFIER  shift, and go to state 87

    T_WHILE       [reduce using rule 119 (epsilon)]
    T_IF          [reduce using rule 119 (epsilon)]
    T_ELSE        [reduce using rule 119 (epsilon)]
    T_WRITELN     [reduce using rule 119 (epsilon)]
    T_FOR         [reduce using rule 119 (epsilon)]
    T_IDENTIFIER  [reduce using rule 119 (epsilon)]
    $default      reduce using rule 119 (epsilon)

    statements             go to state 88
    structured_statements  go to state 89
    conditional_statement  go to state 90
    if_then_follow         go to state 216
    else_if_block          go to state 217
    else_block             go to state 218
    repetitive_statement   go to state 91
    while_statement        go to state 92
    for_statement          go to state 93
    print_statements       go to state 94
    assignment_statements  go to state 95
    assignment_statement   go to state 96
    epsilon                go to state 219


State 209

   72 for_statement: T_FOR T_IDENTIFIER T_ASOP for_list T_DO statements .

    $default  reduce using rule 72 (for_statement)


State 210

   73 for_list: expression T_TO expression .
   86 expression: expression . operator expression

    T_BOOL_AND  shift, and go to state 142
    T_BOOL_OR   shift, and go to state 143
    T_BOOL_NOT  shift, and go to state 144
    T_REL_LE    shift, and go to state 145
    T_REL_GE    shift, and go to state 146
    T_REL_NE    shift, and go to state 147
    T_SINGLEEQ  shift, and go to state 148
    T_BIT_LS    shift, and go to state 149
    T_BIT_RS    shift, and go to state 150
    '+'         shift, and go to state 151
    '*'         shift, and go to state 152
    '/'         shift, and go to state 153
    '-'         shift, and go to state 154
    '%'         shift, and go to state 155
    '>'         shift, and go to state 156
    '<'         shift, and go to state 157
    '&'         shift, and go to state 158
    '|'         shift, and go to state 159
    '~'         shift, and go to state 160
    '!'         shift, and go to state 161

    $default  reduce using rule 73 (for_list)

    operator        go to state 162
    arithmetic_ops  go to state 163
    relational_ops  go to state 164
    boolean_ops     go to state 165
    bitwise_ops     go to state 166


State 211

   74 for_list: expression T_DOWNTO expression .
   86 expression: expression . operator expression

    T_BOOL_AND  shift, and go to state 142
    T_BOOL_OR   shift, and go to state 143
    T_BOOL_NOT  shift, and go to state 144
    T_REL_LE    shift, and go to state 145
    T_REL_GE    shift, and go to state 146
    T_REL_NE    shift, and go to state 147
    T_SINGLEEQ  shift, and go to state 148
    T_BIT_LS    shift, and go to state 149
    T_BIT_RS    shift, and go to state 150
    '+'         shift, and go to state 151
    '*'         shift, and go to state 152
    '/'         shift, and go to state 153
    '-'         shift, and go to state 154
    '%'         shift, and go to state 155
    '>'         shift, and go to state 156
    '<'         shift, and go to state 157
    '&'         shift, and go to state 158
    '|'         shift, and go to state 159
    '~'         shift, and go to state 160
    '!'         shift, and go to state 161

    $default  reduce using rule 74 (for_list)

    operator        go to state 162
    arithmetic_ops  go to state 163
    relational_ops  go to state 164
    boolean_ops     go to state 165
    bitwise_ops     go to state 166


State 212

   53 more_func_identifiers: ',' T_IDENTIFIER $@12 more_func_identifiers .

    $default  reduce using rule 53 (more_func_identifiers)


State 213

   49 function_param_list: T_IDENTIFIER $@10 more_func_identifiers ':' T_DATATYPE $@11 . function_param_continue

    ';'  shift, and go to state 220

    $default  reduce using rule 119 (epsilon)

    function_param_continue  go to state 221
    epsilon                  go to state 222


State 214

   46 function_block: T_FUNCTION T_IDENTIFIER $@9 '(' function_param_list ')' ':' T_DATATYPE ';' block . ';'

    ';'  shift, and go to state 223


State 215

   67 else_if_block: T_ELSE . conditional_statement
   68 else_block: T_ELSE . execution_body

    T_IF  shift, and go to state 83

    T_IF      [reduce using rule 119 (epsilon)]
    $default  reduce using rule 119 (epsilon)

    execution_body         go to state 224
    conditional_statement  go to state 225
    epsilon                go to state 72


State 216

   63 conditional_statement: T_IF '(' boolean_expression ')' T_THEN execution_body if_then_follow .

    $default  reduce using rule 63 (conditional_statement)


State 217

   64 if_then_follow: else_if_block .

    $default  reduce using rule 64 (if_then_follow)


State 218

   65 if_then_follow: else_block .

    $default  reduce using rule 65 (if_then_follow)


State 219

   66 if_then_follow: epsilon .
   77 assignment_statements: epsilon .

    T_WHILE       reduce using rule 66 (if_then_follow)
    T_WHILE       [reduce using rule 77 (assignment_statements)]
    T_IF          reduce using rule 66 (if_then_follow)
    T_IF          [reduce using rule 77 (assignment_statements)]
    T_ELSE        reduce using rule 66 (if_then_follow)
    T_ELSE        [reduce using rule 77 (assignment_statements)]
    T_END         reduce using rule 66 (if_then_follow)
    T_END         [reduce using rule 77 (assignment_statements)]
    T_WRITELN     reduce using rule 66 (if_then_follow)
    T_WRITELN     [reduce using rule 77 (assignment_statements)]
    T_FOR         reduce using rule 66 (if_then_follow)
    T_FOR         [reduce using rule 77 (assignment_statements)]
    T_IDENTIFIER  reduce using rule 66 (if_then_follow)
    T_IDENTIFIER  [reduce using rule 77 (assignment_statements)]
    $default      reduce using rule 66 (if_then_follow)


State 220

   51 function_param_continue: ';' . function_param_list

    T_IDENTIFIER  shift, and go to state 110

    function_param_list  go to state 226


State 221

   49 function_param_list: T_IDENTIFIER $@10 more_func_identifiers ':' T_DATATYPE $@11 function_param_continue .

    $default  reduce using rule 49 (function_param_list)


State 222

   50 function_param_continue: epsilon .

    $default  reduce using rule 50 (function_param_continue)


State 223

   46 function_block: T_FUNCTION T_IDENTIFIER $@9 '(' function_param_list ')' ':' T_DATATYPE ';' block ';' .

    $default  reduce using rule 46 (function_block)


State 224

   56 execution_body: execution_body . statements
   68 else_block: T_ELSE execution_body .

    T_WHILE       shift, and go to state 82
    T_IF          shift, and go to state 83
    T_WRITELN     shift, and go to state 85
    T_FOR         shift, and go to state 86
    T_IDENTIFIER  shift, and go to state 87

    T_WHILE       [reduce using rule 68 (else_block)]
    T_WHILE       [reduce using rule 119 (epsilon)]
    T_IF          [reduce using rule 68 (else_block)]
    T_IF          [reduce using rule 119 (epsilon)]
    T_ELSE        reduce using rule 68 (else_block)
    T_ELSE        [reduce using rule 119 (epsilon)]
    T_END         reduce using rule 68 (else_block)
    T_END         [reduce using rule 119 (epsilon)]
    T_WRITELN     [reduce using rule 68 (else_block)]
    T_WRITELN     [reduce using rule 119 (epsilon)]
    T_FOR         [reduce using rule 68 (else_block)]
    T_FOR         [reduce using rule 119 (epsilon)]
    T_IDENTIFIER  [reduce using rule 68 (else_block)]
    T_IDENTIFIER  [reduce using rule 119 (epsilon)]
    $default      reduce using rule 68 (else_block)

    statements             go to state 88
    structured_statements  go to state 89
    conditional_statement  go to state 90
    repetitive_statement   go to state 91
    while_statement        go to state 92
    for_statement          go to state 93
    print_statements       go to state 94
    assignment_statements  go to state 95
    assignment_statement   go to state 96
    epsilon                go to state 97


State 225

   67 else_if_block: T_ELSE conditional_statement .

    $default  reduce using rule 67 (else_if_block)


State 226

   51 function_param_continue: ';' function_param_list .

    $default  reduce using rule 51 (function_param_continue)
