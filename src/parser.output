State 83 conflicts: 6 shift/reduce
State 132 conflicts: 1 shift/reduce
State 209 conflicts: 14 shift/reduce
State 211 conflicts: 5 shift/reduce
State 214 conflicts: 5 shift/reduce
State 222 conflicts: 6 shift/reduce
State 230 conflicts: 1 shift/reduce
State 234 conflicts: 7 reduce/reduce
State 236 conflicts: 5 shift/reduce, 7 reduce/reduce


Grammar

    0 $accept: startPascal $end

    1 startPascal: program

    2 program: prog_heading block '.'

    3 prog_heading: T_PROGRAM T_IDENTIFIER ';'

    4 @1: %empty

    5 block: uses_block constant_block type_block variable_block function_and_procedure_block @1 execution_block

    6 $@2: %empty

    7 uses_block: T_USES T_IDENTIFIER $@2 more_libs ';'
    8           | epsilon

    9 $@3: %empty

   10 more_libs: ',' T_IDENTIFIER $@3 more_libs
   11          | epsilon

   12 constant_block: T_CONST const_definition
   13               | epsilon

   14 const_definition: T_IDENTIFIER T_SINGLEEQ some_numeric_type ';' more_const_definition

   15 more_const_definition: T_IDENTIFIER T_SINGLEEQ some_numeric_type ';' more_const_definition
   16                      | epsilon

   17 type_block: T_TYPE type_definition
   18           | epsilon

   19 $@4: %empty

   20 $@5: %empty

   21 type_definition: T_IDENTIFIER $@4 more_type_identifiers T_SINGLEEQ T_DATATYPE $@5 ';' type_definition
   22                | epsilon

   23 variable_block: T_VAR variable_declaration
   24               | epsilon

   25 $@6: %empty

   26 variable_declaration: T_IDENTIFIER $@6 more_var_identifiers ':' data_type ';' variable_declaration
   27                     | epsilon

   28 data_type: T_DATATYPE
   29          | T_IDENTIFIER
   30          | T_ARRAY '[' T_INDEXTYPE ']' T_OF T_DATATYPE

   31 $@7: %empty

   32 more_type_identifiers: ',' T_IDENTIFIER $@7 more_type_identifiers
   33                      | epsilon

   34 $@8: %empty

   35 more_var_identifiers: ',' T_IDENTIFIER $@8 more_var_identifiers
   36                     | epsilon

   37 function_and_procedure_block: function_block function_and_procedure_block
   38                             | procedure_block function_and_procedure_block
   39                             | epsilon

   40 $@9: %empty

   41 procedure_block: T_PROCEDURE T_IDENTIFIER $@9 ';' block ';'

   42 $@10: %empty

   43 procedure_block: T_PROCEDURE T_IDENTIFIER $@10 '(' param_list ')' ';' block ';'

   44 param_list: T_IDENTIFIER ':' T_DATATYPE
   45           | T_IDENTIFIER ':' T_DATATYPE ';' param_list
   46           | epsilon

   47 $@11: %empty

   48 function_block: T_FUNCTION T_IDENTIFIER $@11 ':' T_DATATYPE ';' block ';'

   49 $@12: %empty

   50 function_block: T_FUNCTION T_IDENTIFIER $@12 '(' function_param_list ')' ':' T_DATATYPE ';' block ';'

   51 $@13: %empty

   52 $@14: %empty

   53 function_param_list: T_IDENTIFIER $@13 more_func_identifiers ':' T_DATATYPE $@14 function_param_continue

   54 function_param_continue: epsilon
   55                        | ';' function_param_list

   56 $@15: %empty

   57 more_func_identifiers: ',' T_IDENTIFIER $@15 more_func_identifiers
   58                      | epsilon

   59 execution_block: T_BEGIN execution_body T_END

   60 execution_body: execution_body statements
   61               | epsilon

   62 statements: assignment_statements
   63           | structured_statements
   64           | print_statements

   65 structured_statements: conditional_statement
   66                      | repetitive_statement

   67 conditional_statement: T_IF '(' boolean_expression ')' T_THEN execution_body if_then_follow

   68 if_then_follow: else_if_block
   69               | else_block
   70               | epsilon

   71 else_if_block: T_ELSE conditional_statement

   72 else_block: T_ELSE execution_body

   73 repetitive_statement: for_statement
   74                     | while_statement

   75 while_statement: T_WHILE '(' boolean_expression ')' T_DO statements

   76 for_statement: T_FOR T_IDENTIFIER T_ASOP for_list T_DO statements

   77 for_list: expression T_TO expression
   78         | expression T_DOWNTO expression

   79 print_statements: T_WRITELN '(' T_STRINGVAL ')' ';'

   80 assignment_statements: assignment_statement ';' assignment_statements
   81                      | epsilon

   82 @16: %empty

   83 assignment_statement: T_IDENTIFIER @16 assignment_ops expression

   84 value: T_INTVAL
   85      | T_FLOATVAL
   86      | T_BOOLVAL
   87      | T_STRINGVAL

   88 expression: T_IDENTIFIER
   89           | value
   90           | '(' expression ')'
   91           | expression operator expression

   92 boolean_expression: expression relational_ops expression

   93 operator: arithmetic_ops
   94         | boolean_ops
   95         | bitwise_ops

   96 assignment_ops: T_ASOP
   97               | T_AS_PE
   98               | T_AS_SE
   99               | T_AS_MULE
  100               | T_AS_DIVE

  101 arithmetic_ops: '+'
  102               | '*'
  103               | '/'
  104               | '-'
  105               | '%'

  106 relational_ops: T_SINGLEEQ
  107               | '>'
  108               | '<'
  109               | T_REL_LE
  110               | T_REL_GE
  111               | T_REL_NE

  112 boolean_ops: T_BOOL_AND
  113            | T_BOOL_OR
  114            | T_BOOL_NOT

  115 bitwise_ops: '&'
  116            | '|'
  117            | '~'
  118            | '!'
  119            | T_BIT_LS
  120            | T_BIT_RS

  121 some_numeric_type: T_INTVAL
  122                  | T_FLOATVAL

  123 epsilon: %empty


Terminals, with rules where they appear

$end (0) 0
'!' (33) 118
'%' (37) 105
'&' (38) 115
'(' (40) 43 50 67 75 79 90
')' (41) 43 50 67 75 79 90
'*' (42) 102
'+' (43) 101
',' (44) 10 32 35 57
'-' (45) 104
'.' (46) 2
'/' (47) 103
':' (58) 26 44 45 48 50 53
';' (59) 3 7 14 15 21 26 41 43 45 48 50 55 79 80
'<' (60) 108
'>' (62) 107
'[' (91) 30
']' (93) 30
'|' (124) 116
'~' (126) 117
error (256)
T_USES (258) 7
T_WHILE (259) 75
T_PROGRAM (260) 3
T_VAR (261) 23
T_TYPE (262) 17
T_IF (263) 67
T_THEN (264) 67
T_ELSE (265) 71 72
T_BEGIN (266) 59
T_END (267) 59
T_CONST (268) 12
T_WRITELN (269) 79
T_PROCEDURE (270) 41 43
T_FUNCTION (271) 48 50
T_FOR (272) 76
T_DO (273) 75 76
T_TO (274) 77
T_OF (275) 30
T_DOWNTO (276) 78
T_BOOL_AND (277) 112
T_BOOL_OR (278) 113
T_BOOL_NOT (279) 114
T_REL_LE (280) 109
T_REL_GE (281) 110
T_REL_NE (282) 111
T_SINGLEEQ (283) 14 15 21 106
T_BIT_LS (284) 119
T_BIT_RS (285) 120
T_ASOP (286) 76 96
T_AS_PE (287) 97
T_AS_SE (288) 98
T_AS_MULE (289) 99
T_AS_DIVE (290) 100
T_ARRAY (291) 30
T_INDEXTYPE (292) 30
T_IDENTIFIER (293) 3 7 10 14 15 21 26 29 32 35 41 43 44 45 48 50 53
    57 76 83 88
T_DATATYPE (294) 21 28 30 44 45 48 50 53
T_INTVAL (295) 84 121
T_FLOATVAL (296) 85 122
T_BOOLVAL (297) 86
T_STRINGVAL (298) 79 87


Nonterminals, with rules where they appear

$accept (63)
    on left: 0
startPascal (64)
    on left: 1, on right: 0
program (65)
    on left: 2, on right: 1
prog_heading (66)
    on left: 3, on right: 2
block (67)
    on left: 5, on right: 2 41 43 48 50
@1 (68)
    on left: 4, on right: 5
uses_block (69)
    on left: 7 8, on right: 5
$@2 (70)
    on left: 6, on right: 7
more_libs (71)
    on left: 10 11, on right: 7 10
$@3 (72)
    on left: 9, on right: 10
constant_block (73)
    on left: 12 13, on right: 5
const_definition (74)
    on left: 14, on right: 12
more_const_definition (75)
    on left: 15 16, on right: 14 15
type_block (76)
    on left: 17 18, on right: 5
type_definition (77)
    on left: 21 22, on right: 17 21
$@4 (78)
    on left: 19, on right: 21
$@5 (79)
    on left: 20, on right: 21
variable_block (80)
    on left: 23 24, on right: 5
variable_declaration (81)
    on left: 26 27, on right: 23 26
$@6 (82)
    on left: 25, on right: 26
data_type (83)
    on left: 28 29 30, on right: 26
more_type_identifiers (84)
    on left: 32 33, on right: 21 32
$@7 (85)
    on left: 31, on right: 32
more_var_identifiers (86)
    on left: 35 36, on right: 26 35
$@8 (87)
    on left: 34, on right: 35
function_and_procedure_block (88)
    on left: 37 38 39, on right: 5 37 38
procedure_block (89)
    on left: 41 43, on right: 38
$@9 (90)
    on left: 40, on right: 41
$@10 (91)
    on left: 42, on right: 43
param_list (92)
    on left: 44 45 46, on right: 43 45
function_block (93)
    on left: 48 50, on right: 37
$@11 (94)
    on left: 47, on right: 48
$@12 (95)
    on left: 49, on right: 50
function_param_list (96)
    on left: 53, on right: 50 55
$@13 (97)
    on left: 51, on right: 53
$@14 (98)
    on left: 52, on right: 53
function_param_continue (99)
    on left: 54 55, on right: 53
more_func_identifiers (100)
    on left: 57 58, on right: 53 57
$@15 (101)
    on left: 56, on right: 57
execution_block (102)
    on left: 59, on right: 5
execution_body (103)
    on left: 60 61, on right: 59 60 67 72
statements (104)
    on left: 62 63 64, on right: 60 75 76
structured_statements (105)
    on left: 65 66, on right: 63
conditional_statement (106)
    on left: 67, on right: 65 71
if_then_follow (107)
    on left: 68 69 70, on right: 67
else_if_block (108)
    on left: 71, on right: 68
else_block (109)
    on left: 72, on right: 69
repetitive_statement (110)
    on left: 73 74, on right: 66
while_statement (111)
    on left: 75, on right: 74
for_statement (112)
    on left: 76, on right: 73
for_list (113)
    on left: 77 78, on right: 76
print_statements (114)
    on left: 79, on right: 64
assignment_statements (115)
    on left: 80 81, on right: 62 80
assignment_statement (116)
    on left: 83, on right: 80
@16 (117)
    on left: 82, on right: 83
value (118)
    on left: 84 85 86 87, on right: 89
expression (119)
    on left: 88 89 90 91, on right: 77 78 83 90 91 92
boolean_expression (120)
    on left: 92, on right: 67 75
operator (121)
    on left: 93 94 95, on right: 91
assignment_ops (122)
    on left: 96 97 98 99 100, on right: 83
arithmetic_ops (123)
    on left: 101 102 103 104 105, on right: 93
relational_ops (124)
    on left: 106 107 108 109 110 111, on right: 92
boolean_ops (125)
    on left: 112 113 114, on right: 94
bitwise_ops (126)
    on left: 115 116 117 118 119 120, on right: 95
some_numeric_type (127)
    on left: 121 122, on right: 14 15
epsilon (128)
    on left: 123, on right: 8 11 13 16 18 22 24 27 33 36 39 46 54 58
    61 70 81


State 0

    0 $accept: . startPascal $end

    T_PROGRAM  shift, and go to state 1

    startPascal   go to state 2
    program       go to state 3
    prog_heading  go to state 4


State 1

    3 prog_heading: T_PROGRAM . T_IDENTIFIER ';'

    T_IDENTIFIER  shift, and go to state 5


State 2

    0 $accept: startPascal . $end

    $end  shift, and go to state 6


State 3

    1 startPascal: program .

    $default  reduce using rule 1 (startPascal)


State 4

    2 program: prog_heading . block '.'

    T_USES  shift, and go to state 7

    $default  reduce using rule 123 (epsilon)

    block       go to state 8
    uses_block  go to state 9
    epsilon     go to state 10


State 5

    3 prog_heading: T_PROGRAM T_IDENTIFIER . ';'

    ';'  shift, and go to state 11


State 6

    0 $accept: startPascal $end .

    $default  accept


State 7

    7 uses_block: T_USES . T_IDENTIFIER $@2 more_libs ';'

    T_IDENTIFIER  shift, and go to state 12


State 8

    2 program: prog_heading block . '.'

    '.'  shift, and go to state 13


State 9

    5 block: uses_block . constant_block type_block variable_block function_and_procedure_block @1 execution_block

    T_CONST  shift, and go to state 14

    $default  reduce using rule 123 (epsilon)

    constant_block  go to state 15
    epsilon         go to state 16


State 10

    8 uses_block: epsilon .

    $default  reduce using rule 8 (uses_block)


State 11

    3 prog_heading: T_PROGRAM T_IDENTIFIER ';' .

    $default  reduce using rule 3 (prog_heading)


State 12

    7 uses_block: T_USES T_IDENTIFIER . $@2 more_libs ';'

    $default  reduce using rule 6 ($@2)

    $@2  go to state 17


State 13

    2 program: prog_heading block '.' .

    $default  reduce using rule 2 (program)


State 14

   12 constant_block: T_CONST . const_definition

    T_IDENTIFIER  shift, and go to state 18

    const_definition  go to state 19


State 15

    5 block: uses_block constant_block . type_block variable_block function_and_procedure_block @1 execution_block

    T_TYPE  shift, and go to state 20

    $default  reduce using rule 123 (epsilon)

    type_block  go to state 21
    epsilon     go to state 22


State 16

   13 constant_block: epsilon .

    $default  reduce using rule 13 (constant_block)


State 17

    7 uses_block: T_USES T_IDENTIFIER $@2 . more_libs ';'

    ','  shift, and go to state 23

    $default  reduce using rule 123 (epsilon)

    more_libs  go to state 24
    epsilon    go to state 25


State 18

   14 const_definition: T_IDENTIFIER . T_SINGLEEQ some_numeric_type ';' more_const_definition

    T_SINGLEEQ  shift, and go to state 26


State 19

   12 constant_block: T_CONST const_definition .

    $default  reduce using rule 12 (constant_block)


State 20

   17 type_block: T_TYPE . type_definition

    T_IDENTIFIER  shift, and go to state 27

    $default  reduce using rule 123 (epsilon)

    type_definition  go to state 28
    epsilon          go to state 29


State 21

    5 block: uses_block constant_block type_block . variable_block function_and_procedure_block @1 execution_block

    T_VAR  shift, and go to state 30

    $default  reduce using rule 123 (epsilon)

    variable_block  go to state 31
    epsilon         go to state 32


State 22

   18 type_block: epsilon .

    $default  reduce using rule 18 (type_block)


State 23

   10 more_libs: ',' . T_IDENTIFIER $@3 more_libs

    T_IDENTIFIER  shift, and go to state 33


State 24

    7 uses_block: T_USES T_IDENTIFIER $@2 more_libs . ';'

    ';'  shift, and go to state 34


State 25

   11 more_libs: epsilon .

    $default  reduce using rule 11 (more_libs)


State 26

   14 const_definition: T_IDENTIFIER T_SINGLEEQ . some_numeric_type ';' more_const_definition

    T_INTVAL    shift, and go to state 35
    T_FLOATVAL  shift, and go to state 36

    some_numeric_type  go to state 37


State 27

   21 type_definition: T_IDENTIFIER . $@4 more_type_identifiers T_SINGLEEQ T_DATATYPE $@5 ';' type_definition

    $default  reduce using rule 19 ($@4)

    $@4  go to state 38


State 28

   17 type_block: T_TYPE type_definition .

    $default  reduce using rule 17 (type_block)


State 29

   22 type_definition: epsilon .

    $default  reduce using rule 22 (type_definition)


State 30

   23 variable_block: T_VAR . variable_declaration

    T_IDENTIFIER  shift, and go to state 39

    $default  reduce using rule 123 (epsilon)

    variable_declaration  go to state 40
    epsilon               go to state 41


State 31

    5 block: uses_block constant_block type_block variable_block . function_and_procedure_block @1 execution_block

    T_PROCEDURE  shift, and go to state 42
    T_FUNCTION   shift, and go to state 43

    $default  reduce using rule 123 (epsilon)

    function_and_procedure_block  go to state 44
    procedure_block               go to state 45
    function_block                go to state 46
    epsilon                       go to state 47


State 32

   24 variable_block: epsilon .

    $default  reduce using rule 24 (variable_block)


State 33

   10 more_libs: ',' T_IDENTIFIER . $@3 more_libs

    $default  reduce using rule 9 ($@3)

    $@3  go to state 48


State 34

    7 uses_block: T_USES T_IDENTIFIER $@2 more_libs ';' .

    $default  reduce using rule 7 (uses_block)


State 35

  121 some_numeric_type: T_INTVAL .

    $default  reduce using rule 121 (some_numeric_type)


State 36

  122 some_numeric_type: T_FLOATVAL .

    $default  reduce using rule 122 (some_numeric_type)


State 37

   14 const_definition: T_IDENTIFIER T_SINGLEEQ some_numeric_type . ';' more_const_definition

    ';'  shift, and go to state 49


State 38

   21 type_definition: T_IDENTIFIER $@4 . more_type_identifiers T_SINGLEEQ T_DATATYPE $@5 ';' type_definition

    ','  shift, and go to state 50

    $default  reduce using rule 123 (epsilon)

    more_type_identifiers  go to state 51
    epsilon                go to state 52


State 39

   26 variable_declaration: T_IDENTIFIER . $@6 more_var_identifiers ':' data_type ';' variable_declaration

    $default  reduce using rule 25 ($@6)

    $@6  go to state 53


State 40

   23 variable_block: T_VAR variable_declaration .

    $default  reduce using rule 23 (variable_block)


State 41

   27 variable_declaration: epsilon .

    $default  reduce using rule 27 (variable_declaration)


State 42

   41 procedure_block: T_PROCEDURE . T_IDENTIFIER $@9 ';' block ';'
   43                | T_PROCEDURE . T_IDENTIFIER $@10 '(' param_list ')' ';' block ';'

    T_IDENTIFIER  shift, and go to state 54


State 43

   48 function_block: T_FUNCTION . T_IDENTIFIER $@11 ':' T_DATATYPE ';' block ';'
   50               | T_FUNCTION . T_IDENTIFIER $@12 '(' function_param_list ')' ':' T_DATATYPE ';' block ';'

    T_IDENTIFIER  shift, and go to state 55


State 44

    5 block: uses_block constant_block type_block variable_block function_and_procedure_block . @1 execution_block

    $default  reduce using rule 4 (@1)

    @1  go to state 56


State 45

   38 function_and_procedure_block: procedure_block . function_and_procedure_block

    T_PROCEDURE  shift, and go to state 42
    T_FUNCTION   shift, and go to state 43

    $default  reduce using rule 123 (epsilon)

    function_and_procedure_block  go to state 57
    procedure_block               go to state 45
    function_block                go to state 46
    epsilon                       go to state 47


State 46

   37 function_and_procedure_block: function_block . function_and_procedure_block

    T_PROCEDURE  shift, and go to state 42
    T_FUNCTION   shift, and go to state 43

    $default  reduce using rule 123 (epsilon)

    function_and_procedure_block  go to state 58
    procedure_block               go to state 45
    function_block                go to state 46
    epsilon                       go to state 47


State 47

   39 function_and_procedure_block: epsilon .

    $default  reduce using rule 39 (function_and_procedure_block)


State 48

   10 more_libs: ',' T_IDENTIFIER $@3 . more_libs

    ','  shift, and go to state 23

    $default  reduce using rule 123 (epsilon)

    more_libs  go to state 59
    epsilon    go to state 25


State 49

   14 const_definition: T_IDENTIFIER T_SINGLEEQ some_numeric_type ';' . more_const_definition

    T_IDENTIFIER  shift, and go to state 60

    $default  reduce using rule 123 (epsilon)

    more_const_definition  go to state 61
    epsilon                go to state 62


State 50

   32 more_type_identifiers: ',' . T_IDENTIFIER $@7 more_type_identifiers

    T_IDENTIFIER  shift, and go to state 63


State 51

   21 type_definition: T_IDENTIFIER $@4 more_type_identifiers . T_SINGLEEQ T_DATATYPE $@5 ';' type_definition

    T_SINGLEEQ  shift, and go to state 64


State 52

   33 more_type_identifiers: epsilon .

    $default  reduce using rule 33 (more_type_identifiers)


State 53

   26 variable_declaration: T_IDENTIFIER $@6 . more_var_identifiers ':' data_type ';' variable_declaration

    ','  shift, and go to state 65

    $default  reduce using rule 123 (epsilon)

    more_var_identifiers  go to state 66
    epsilon               go to state 67


State 54

   41 procedure_block: T_PROCEDURE T_IDENTIFIER . $@9 ';' block ';'
   43                | T_PROCEDURE T_IDENTIFIER . $@10 '(' param_list ')' ';' block ';'

    '('       reduce using rule 42 ($@10)
    $default  reduce using rule 40 ($@9)

    $@9   go to state 68
    $@10  go to state 69


State 55

   48 function_block: T_FUNCTION T_IDENTIFIER . $@11 ':' T_DATATYPE ';' block ';'
   50               | T_FUNCTION T_IDENTIFIER . $@12 '(' function_param_list ')' ':' T_DATATYPE ';' block ';'

    '('       reduce using rule 49 ($@12)
    $default  reduce using rule 47 ($@11)

    $@11  go to state 70
    $@12  go to state 71


State 56

    5 block: uses_block constant_block type_block variable_block function_and_procedure_block @1 . execution_block

    T_BEGIN  shift, and go to state 72

    execution_block  go to state 73


State 57

   38 function_and_procedure_block: procedure_block function_and_procedure_block .

    $default  reduce using rule 38 (function_and_procedure_block)


State 58

   37 function_and_procedure_block: function_block function_and_procedure_block .

    $default  reduce using rule 37 (function_and_procedure_block)


State 59

   10 more_libs: ',' T_IDENTIFIER $@3 more_libs .

    $default  reduce using rule 10 (more_libs)


State 60

   15 more_const_definition: T_IDENTIFIER . T_SINGLEEQ some_numeric_type ';' more_const_definition

    T_SINGLEEQ  shift, and go to state 74


State 61

   14 const_definition: T_IDENTIFIER T_SINGLEEQ some_numeric_type ';' more_const_definition .

    $default  reduce using rule 14 (const_definition)


State 62

   16 more_const_definition: epsilon .

    $default  reduce using rule 16 (more_const_definition)


State 63

   32 more_type_identifiers: ',' T_IDENTIFIER . $@7 more_type_identifiers

    $default  reduce using rule 31 ($@7)

    $@7  go to state 75


State 64

   21 type_definition: T_IDENTIFIER $@4 more_type_identifiers T_SINGLEEQ . T_DATATYPE $@5 ';' type_definition

    T_DATATYPE  shift, and go to state 76


State 65

   35 more_var_identifiers: ',' . T_IDENTIFIER $@8 more_var_identifiers

    T_IDENTIFIER  shift, and go to state 77


State 66

   26 variable_declaration: T_IDENTIFIER $@6 more_var_identifiers . ':' data_type ';' variable_declaration

    ':'  shift, and go to state 78


State 67

   36 more_var_identifiers: epsilon .

    $default  reduce using rule 36 (more_var_identifiers)


State 68

   41 procedure_block: T_PROCEDURE T_IDENTIFIER $@9 . ';' block ';'

    ';'  shift, and go to state 79


State 69

   43 procedure_block: T_PROCEDURE T_IDENTIFIER $@10 . '(' param_list ')' ';' block ';'

    '('  shift, and go to state 80


State 70

   48 function_block: T_FUNCTION T_IDENTIFIER $@11 . ':' T_DATATYPE ';' block ';'

    ':'  shift, and go to state 81


State 71

   50 function_block: T_FUNCTION T_IDENTIFIER $@12 . '(' function_param_list ')' ':' T_DATATYPE ';' block ';'

    '('  shift, and go to state 82


State 72

   59 execution_block: T_BEGIN . execution_body T_END

    $default  reduce using rule 123 (epsilon)

    execution_body  go to state 83
    epsilon         go to state 84


State 73

    5 block: uses_block constant_block type_block variable_block function_and_procedure_block @1 execution_block .

    $default  reduce using rule 5 (block)


State 74

   15 more_const_definition: T_IDENTIFIER T_SINGLEEQ . some_numeric_type ';' more_const_definition

    T_INTVAL    shift, and go to state 35
    T_FLOATVAL  shift, and go to state 36

    some_numeric_type  go to state 85


State 75

   32 more_type_identifiers: ',' T_IDENTIFIER $@7 . more_type_identifiers

    ','  shift, and go to state 50

    $default  reduce using rule 123 (epsilon)

    more_type_identifiers  go to state 86
    epsilon                go to state 52


State 76

   21 type_definition: T_IDENTIFIER $@4 more_type_identifiers T_SINGLEEQ T_DATATYPE . $@5 ';' type_definition

    $default  reduce using rule 20 ($@5)

    $@5  go to state 87


State 77

   35 more_var_identifiers: ',' T_IDENTIFIER . $@8 more_var_identifiers

    $default  reduce using rule 34 ($@8)

    $@8  go to state 88


State 78

   26 variable_declaration: T_IDENTIFIER $@6 more_var_identifiers ':' . data_type ';' variable_declaration

    T_ARRAY       shift, and go to state 89
    T_IDENTIFIER  shift, and go to state 90
    T_DATATYPE    shift, and go to state 91

    data_type  go to state 92


State 79

   41 procedure_block: T_PROCEDURE T_IDENTIFIER $@9 ';' . block ';'

    T_USES  shift, and go to state 7

    $default  reduce using rule 123 (epsilon)

    block       go to state 93
    uses_block  go to state 9
    epsilon     go to state 10


State 80

   43 procedure_block: T_PROCEDURE T_IDENTIFIER $@10 '(' . param_list ')' ';' block ';'

    T_IDENTIFIER  shift, and go to state 94

    $default  reduce using rule 123 (epsilon)

    param_list  go to state 95
    epsilon     go to state 96


State 81

   48 function_block: T_FUNCTION T_IDENTIFIER $@11 ':' . T_DATATYPE ';' block ';'

    T_DATATYPE  shift, and go to state 97


State 82

   50 function_block: T_FUNCTION T_IDENTIFIER $@12 '(' . function_param_list ')' ':' T_DATATYPE ';' block ';'

    T_IDENTIFIER  shift, and go to state 98

    function_param_list  go to state 99


State 83

   59 execution_block: T_BEGIN execution_body . T_END
   60 execution_body: execution_body . statements

    T_WHILE       shift, and go to state 100
    T_IF          shift, and go to state 101
    T_END         shift, and go to state 102
    T_WRITELN     shift, and go to state 103
    T_FOR         shift, and go to state 104
    T_IDENTIFIER  shift, and go to state 105

    T_WHILE       [reduce using rule 123 (epsilon)]
    T_IF          [reduce using rule 123 (epsilon)]
    T_END         [reduce using rule 123 (epsilon)]
    T_WRITELN     [reduce using rule 123 (epsilon)]
    T_FOR         [reduce using rule 123 (epsilon)]
    T_IDENTIFIER  [reduce using rule 123 (epsilon)]

    statements             go to state 106
    structured_statements  go to state 107
    conditional_statement  go to state 108
    repetitive_statement   go to state 109
    while_statement        go to state 110
    for_statement          go to state 111
    print_statements       go to state 112
    assignment_statements  go to state 113
    assignment_statement   go to state 114
    epsilon                go to state 115


State 84

   61 execution_body: epsilon .

    $default  reduce using rule 61 (execution_body)


State 85

   15 more_const_definition: T_IDENTIFIER T_SINGLEEQ some_numeric_type . ';' more_const_definition

    ';'  shift, and go to state 116


State 86

   32 more_type_identifiers: ',' T_IDENTIFIER $@7 more_type_identifiers .

    $default  reduce using rule 32 (more_type_identifiers)


State 87

   21 type_definition: T_IDENTIFIER $@4 more_type_identifiers T_SINGLEEQ T_DATATYPE $@5 . ';' type_definition

    ';'  shift, and go to state 117


State 88

   35 more_var_identifiers: ',' T_IDENTIFIER $@8 . more_var_identifiers

    ','  shift, and go to state 65

    $default  reduce using rule 123 (epsilon)

    more_var_identifiers  go to state 118
    epsilon               go to state 67


State 89

   30 data_type: T_ARRAY . '[' T_INDEXTYPE ']' T_OF T_DATATYPE

    '['  shift, and go to state 119


State 90

   29 data_type: T_IDENTIFIER .

    $default  reduce using rule 29 (data_type)


State 91

   28 data_type: T_DATATYPE .

    $default  reduce using rule 28 (data_type)


State 92

   26 variable_declaration: T_IDENTIFIER $@6 more_var_identifiers ':' data_type . ';' variable_declaration

    ';'  shift, and go to state 120


State 93

   41 procedure_block: T_PROCEDURE T_IDENTIFIER $@9 ';' block . ';'

    ';'  shift, and go to state 121


State 94

   44 param_list: T_IDENTIFIER . ':' T_DATATYPE
   45           | T_IDENTIFIER . ':' T_DATATYPE ';' param_list

    ':'  shift, and go to state 122


State 95

   43 procedure_block: T_PROCEDURE T_IDENTIFIER $@10 '(' param_list . ')' ';' block ';'

    ')'  shift, and go to state 123


State 96

   46 param_list: epsilon .

    $default  reduce using rule 46 (param_list)


State 97

   48 function_block: T_FUNCTION T_IDENTIFIER $@11 ':' T_DATATYPE . ';' block ';'

    ';'  shift, and go to state 124


State 98

   53 function_param_list: T_IDENTIFIER . $@13 more_func_identifiers ':' T_DATATYPE $@14 function_param_continue

    $default  reduce using rule 51 ($@13)

    $@13  go to state 125


State 99

   50 function_block: T_FUNCTION T_IDENTIFIER $@12 '(' function_param_list . ')' ':' T_DATATYPE ';' block ';'

    ')'  shift, and go to state 126


State 100

   75 while_statement: T_WHILE . '(' boolean_expression ')' T_DO statements

    '('  shift, and go to state 127


State 101

   67 conditional_statement: T_IF . '(' boolean_expression ')' T_THEN execution_body if_then_follow

    '('  shift, and go to state 128


State 102

   59 execution_block: T_BEGIN execution_body T_END .

    $default  reduce using rule 59 (execution_block)


State 103

   79 print_statements: T_WRITELN . '(' T_STRINGVAL ')' ';'

    '('  shift, and go to state 129


State 104

   76 for_statement: T_FOR . T_IDENTIFIER T_ASOP for_list T_DO statements

    T_IDENTIFIER  shift, and go to state 130


State 105

   83 assignment_statement: T_IDENTIFIER . @16 assignment_ops expression

    $default  reduce using rule 82 (@16)

    @16  go to state 131


State 106

   60 execution_body: execution_body statements .

    $default  reduce using rule 60 (execution_body)


State 107

   63 statements: structured_statements .

    $default  reduce using rule 63 (statements)


State 108

   65 structured_statements: conditional_statement .

    $default  reduce using rule 65 (structured_statements)


State 109

   66 structured_statements: repetitive_statement .

    $default  reduce using rule 66 (structured_statements)


State 110

   74 repetitive_statement: while_statement .

    $default  reduce using rule 74 (repetitive_statement)


State 111

   73 repetitive_statement: for_statement .

    $default  reduce using rule 73 (repetitive_statement)


State 112

   64 statements: print_statements .

    $default  reduce using rule 64 (statements)


State 113

   62 statements: assignment_statements .

    $default  reduce using rule 62 (statements)


State 114

   80 assignment_statements: assignment_statement . ';' assignment_statements

    ';'  shift, and go to state 132


State 115

   81 assignment_statements: epsilon .

    $default  reduce using rule 81 (assignment_statements)


State 116

   15 more_const_definition: T_IDENTIFIER T_SINGLEEQ some_numeric_type ';' . more_const_definition

    T_IDENTIFIER  shift, and go to state 60

    $default  reduce using rule 123 (epsilon)

    more_const_definition  go to state 133
    epsilon                go to state 62


State 117

   21 type_definition: T_IDENTIFIER $@4 more_type_identifiers T_SINGLEEQ T_DATATYPE $@5 ';' . type_definition

    T_IDENTIFIER  shift, and go to state 27

    $default  reduce using rule 123 (epsilon)

    type_definition  go to state 134
    epsilon          go to state 29


State 118

   35 more_var_identifiers: ',' T_IDENTIFIER $@8 more_var_identifiers .

    $default  reduce using rule 35 (more_var_identifiers)


State 119

   30 data_type: T_ARRAY '[' . T_INDEXTYPE ']' T_OF T_DATATYPE

    T_INDEXTYPE  shift, and go to state 135


State 120

   26 variable_declaration: T_IDENTIFIER $@6 more_var_identifiers ':' data_type ';' . variable_declaration

    T_IDENTIFIER  shift, and go to state 39

    $default  reduce using rule 123 (epsilon)

    variable_declaration  go to state 136
    epsilon               go to state 41


State 121

   41 procedure_block: T_PROCEDURE T_IDENTIFIER $@9 ';' block ';' .

    $default  reduce using rule 41 (procedure_block)


State 122

   44 param_list: T_IDENTIFIER ':' . T_DATATYPE
   45           | T_IDENTIFIER ':' . T_DATATYPE ';' param_list

    T_DATATYPE  shift, and go to state 137


State 123

   43 procedure_block: T_PROCEDURE T_IDENTIFIER $@10 '(' param_list ')' . ';' block ';'

    ';'  shift, and go to state 138


State 124

   48 function_block: T_FUNCTION T_IDENTIFIER $@11 ':' T_DATATYPE ';' . block ';'

    T_USES  shift, and go to state 7

    $default  reduce using rule 123 (epsilon)

    block       go to state 139
    uses_block  go to state 9
    epsilon     go to state 10


State 125

   53 function_param_list: T_IDENTIFIER $@13 . more_func_identifiers ':' T_DATATYPE $@14 function_param_continue

    ','  shift, and go to state 140

    $default  reduce using rule 123 (epsilon)

    more_func_identifiers  go to state 141
    epsilon                go to state 142


State 126

   50 function_block: T_FUNCTION T_IDENTIFIER $@12 '(' function_param_list ')' . ':' T_DATATYPE ';' block ';'

    ':'  shift, and go to state 143


State 127

   75 while_statement: T_WHILE '(' . boolean_expression ')' T_DO statements

    T_IDENTIFIER  shift, and go to state 144
    T_INTVAL      shift, and go to state 145
    T_FLOATVAL    shift, and go to state 146
    T_BOOLVAL     shift, and go to state 147
    T_STRINGVAL   shift, and go to state 148
    '('           shift, and go to state 149

    value               go to state 150
    expression          go to state 151
    boolean_expression  go to state 152


State 128

   67 conditional_statement: T_IF '(' . boolean_expression ')' T_THEN execution_body if_then_follow

    T_IDENTIFIER  shift, and go to state 144
    T_INTVAL      shift, and go to state 145
    T_FLOATVAL    shift, and go to state 146
    T_BOOLVAL     shift, and go to state 147
    T_STRINGVAL   shift, and go to state 148
    '('           shift, and go to state 149

    value               go to state 150
    expression          go to state 151
    boolean_expression  go to state 153


State 129

   79 print_statements: T_WRITELN '(' . T_STRINGVAL ')' ';'

    T_STRINGVAL  shift, and go to state 154


State 130

   76 for_statement: T_FOR T_IDENTIFIER . T_ASOP for_list T_DO statements

    T_ASOP  shift, and go to state 155


State 131

   83 assignment_statement: T_IDENTIFIER @16 . assignment_ops expression

    T_ASOP     shift, and go to state 156
    T_AS_PE    shift, and go to state 157
    T_AS_SE    shift, and go to state 158
    T_AS_MULE  shift, and go to state 159
    T_AS_DIVE  shift, and go to state 160

    assignment_ops  go to state 161


State 132

   80 assignment_statements: assignment_statement ';' . assignment_statements

    T_IDENTIFIER  shift, and go to state 105

    T_IDENTIFIER  [reduce using rule 123 (epsilon)]
    $default      reduce using rule 123 (epsilon)

    assignment_statements  go to state 162
    assignment_statement   go to state 114
    epsilon                go to state 115


State 133

   15 more_const_definition: T_IDENTIFIER T_SINGLEEQ some_numeric_type ';' more_const_definition .

    $default  reduce using rule 15 (more_const_definition)


State 134

   21 type_definition: T_IDENTIFIER $@4 more_type_identifiers T_SINGLEEQ T_DATATYPE $@5 ';' type_definition .

    $default  reduce using rule 21 (type_definition)


State 135

   30 data_type: T_ARRAY '[' T_INDEXTYPE . ']' T_OF T_DATATYPE

    ']'  shift, and go to state 163


State 136

   26 variable_declaration: T_IDENTIFIER $@6 more_var_identifiers ':' data_type ';' variable_declaration .

    $default  reduce using rule 26 (variable_declaration)


State 137

   44 param_list: T_IDENTIFIER ':' T_DATATYPE .
   45           | T_IDENTIFIER ':' T_DATATYPE . ';' param_list

    ';'  shift, and go to state 164

    $default  reduce using rule 44 (param_list)


State 138

   43 procedure_block: T_PROCEDURE T_IDENTIFIER $@10 '(' param_list ')' ';' . block ';'

    T_USES  shift, and go to state 7

    $default  reduce using rule 123 (epsilon)

    block       go to state 165
    uses_block  go to state 9
    epsilon     go to state 10


State 139

   48 function_block: T_FUNCTION T_IDENTIFIER $@11 ':' T_DATATYPE ';' block . ';'

    ';'  shift, and go to state 166


State 140

   57 more_func_identifiers: ',' . T_IDENTIFIER $@15 more_func_identifiers

    T_IDENTIFIER  shift, and go to state 167


State 141

   53 function_param_list: T_IDENTIFIER $@13 more_func_identifiers . ':' T_DATATYPE $@14 function_param_continue

    ':'  shift, and go to state 168


State 142

   58 more_func_identifiers: epsilon .

    $default  reduce using rule 58 (more_func_identifiers)


State 143

   50 function_block: T_FUNCTION T_IDENTIFIER $@12 '(' function_param_list ')' ':' . T_DATATYPE ';' block ';'

    T_DATATYPE  shift, and go to state 169


State 144

   88 expression: T_IDENTIFIER .

    $default  reduce using rule 88 (expression)


State 145

   84 value: T_INTVAL .

    $default  reduce using rule 84 (value)


State 146

   85 value: T_FLOATVAL .

    $default  reduce using rule 85 (value)


State 147

   86 value: T_BOOLVAL .

    $default  reduce using rule 86 (value)


State 148

   87 value: T_STRINGVAL .

    $default  reduce using rule 87 (value)


State 149

   90 expression: '(' . expression ')'

    T_IDENTIFIER  shift, and go to state 144
    T_INTVAL      shift, and go to state 145
    T_FLOATVAL    shift, and go to state 146
    T_BOOLVAL     shift, and go to state 147
    T_STRINGVAL   shift, and go to state 148
    '('           shift, and go to state 149

    value       go to state 150
    expression  go to state 170


State 150

   89 expression: value .

    $default  reduce using rule 89 (expression)


State 151

   91 expression: expression . operator expression
   92 boolean_expression: expression . relational_ops expression

    T_BOOL_AND  shift, and go to state 171
    T_BOOL_OR   shift, and go to state 172
    T_BOOL_NOT  shift, and go to state 173
    T_REL_LE    shift, and go to state 174
    T_REL_GE    shift, and go to state 175
    T_REL_NE    shift, and go to state 176
    T_SINGLEEQ  shift, and go to state 177
    T_BIT_LS    shift, and go to state 178
    T_BIT_RS    shift, and go to state 179
    '+'         shift, and go to state 180
    '-'         shift, and go to state 181
    '*'         shift, and go to state 182
    '/'         shift, and go to state 183
    '%'         shift, and go to state 184
    '>'         shift, and go to state 185
    '<'         shift, and go to state 186
    '&'         shift, and go to state 187
    '|'         shift, and go to state 188
    '~'         shift, and go to state 189
    '!'         shift, and go to state 190

    operator        go to state 191
    arithmetic_ops  go to state 192
    relational_ops  go to state 193
    boolean_ops     go to state 194
    bitwise_ops     go to state 195


State 152

   75 while_statement: T_WHILE '(' boolean_expression . ')' T_DO statements

    ')'  shift, and go to state 196


State 153

   67 conditional_statement: T_IF '(' boolean_expression . ')' T_THEN execution_body if_then_follow

    ')'  shift, and go to state 197


State 154

   79 print_statements: T_WRITELN '(' T_STRINGVAL . ')' ';'

    ')'  shift, and go to state 198


State 155

   76 for_statement: T_FOR T_IDENTIFIER T_ASOP . for_list T_DO statements

    T_IDENTIFIER  shift, and go to state 144
    T_INTVAL      shift, and go to state 145
    T_FLOATVAL    shift, and go to state 146
    T_BOOLVAL     shift, and go to state 147
    T_STRINGVAL   shift, and go to state 148
    '('           shift, and go to state 149

    for_list    go to state 199
    value       go to state 150
    expression  go to state 200


State 156

   96 assignment_ops: T_ASOP .

    $default  reduce using rule 96 (assignment_ops)


State 157

   97 assignment_ops: T_AS_PE .

    $default  reduce using rule 97 (assignment_ops)


State 158

   98 assignment_ops: T_AS_SE .

    $default  reduce using rule 98 (assignment_ops)


State 159

   99 assignment_ops: T_AS_MULE .

    $default  reduce using rule 99 (assignment_ops)


State 160

  100 assignment_ops: T_AS_DIVE .

    $default  reduce using rule 100 (assignment_ops)


State 161

   83 assignment_statement: T_IDENTIFIER @16 assignment_ops . expression

    T_IDENTIFIER  shift, and go to state 144
    T_INTVAL      shift, and go to state 145
    T_FLOATVAL    shift, and go to state 146
    T_BOOLVAL     shift, and go to state 147
    T_STRINGVAL   shift, and go to state 148
    '('           shift, and go to state 149

    value       go to state 150
    expression  go to state 201


State 162

   80 assignment_statements: assignment_statement ';' assignment_statements .

    $default  reduce using rule 80 (assignment_statements)


State 163

   30 data_type: T_ARRAY '[' T_INDEXTYPE ']' . T_OF T_DATATYPE

    T_OF  shift, and go to state 202


State 164

   45 param_list: T_IDENTIFIER ':' T_DATATYPE ';' . param_list

    T_IDENTIFIER  shift, and go to state 94

    $default  reduce using rule 123 (epsilon)

    param_list  go to state 203
    epsilon     go to state 96


State 165

   43 procedure_block: T_PROCEDURE T_IDENTIFIER $@10 '(' param_list ')' ';' block . ';'

    ';'  shift, and go to state 204


State 166

   48 function_block: T_FUNCTION T_IDENTIFIER $@11 ':' T_DATATYPE ';' block ';' .

    $default  reduce using rule 48 (function_block)


State 167

   57 more_func_identifiers: ',' T_IDENTIFIER . $@15 more_func_identifiers

    $default  reduce using rule 56 ($@15)

    $@15  go to state 205


State 168

   53 function_param_list: T_IDENTIFIER $@13 more_func_identifiers ':' . T_DATATYPE $@14 function_param_continue

    T_DATATYPE  shift, and go to state 206


State 169

   50 function_block: T_FUNCTION T_IDENTIFIER $@12 '(' function_param_list ')' ':' T_DATATYPE . ';' block ';'

    ';'  shift, and go to state 207


State 170

   90 expression: '(' expression . ')'
   91           | expression . operator expression

    T_BOOL_AND  shift, and go to state 171
    T_BOOL_OR   shift, and go to state 172
    T_BOOL_NOT  shift, and go to state 173
    T_BIT_LS    shift, and go to state 178
    T_BIT_RS    shift, and go to state 179
    '+'         shift, and go to state 180
    '-'         shift, and go to state 181
    '*'         shift, and go to state 182
    '/'         shift, and go to state 183
    ')'         shift, and go to state 208
    '%'         shift, and go to state 184
    '&'         shift, and go to state 187
    '|'         shift, and go to state 188
    '~'         shift, and go to state 189
    '!'         shift, and go to state 190

    operator        go to state 191
    arithmetic_ops  go to state 192
    boolean_ops     go to state 194
    bitwise_ops     go to state 195


State 171

  112 boolean_ops: T_BOOL_AND .

    $default  reduce using rule 112 (boolean_ops)


State 172

  113 boolean_ops: T_BOOL_OR .

    $default  reduce using rule 113 (boolean_ops)


State 173

  114 boolean_ops: T_BOOL_NOT .

    $default  reduce using rule 114 (boolean_ops)


State 174

  109 relational_ops: T_REL_LE .

    $default  reduce using rule 109 (relational_ops)


State 175

  110 relational_ops: T_REL_GE .

    $default  reduce using rule 110 (relational_ops)


State 176

  111 relational_ops: T_REL_NE .

    $default  reduce using rule 111 (relational_ops)


State 177

  106 relational_ops: T_SINGLEEQ .

    $default  reduce using rule 106 (relational_ops)


State 178

  119 bitwise_ops: T_BIT_LS .

    $default  reduce using rule 119 (bitwise_ops)


State 179

  120 bitwise_ops: T_BIT_RS .

    $default  reduce using rule 120 (bitwise_ops)


State 180

  101 arithmetic_ops: '+' .

    $default  reduce using rule 101 (arithmetic_ops)


State 181

  104 arithmetic_ops: '-' .

    $default  reduce using rule 104 (arithmetic_ops)


State 182

  102 arithmetic_ops: '*' .

    $default  reduce using rule 102 (arithmetic_ops)


State 183

  103 arithmetic_ops: '/' .

    $default  reduce using rule 103 (arithmetic_ops)


State 184

  105 arithmetic_ops: '%' .

    $default  reduce using rule 105 (arithmetic_ops)


State 185

  107 relational_ops: '>' .

    $default  reduce using rule 107 (relational_ops)


State 186

  108 relational_ops: '<' .

    $default  reduce using rule 108 (relational_ops)


State 187

  115 bitwise_ops: '&' .

    $default  reduce using rule 115 (bitwise_ops)


State 188

  116 bitwise_ops: '|' .

    $default  reduce using rule 116 (bitwise_ops)


State 189

  117 bitwise_ops: '~' .

    $default  reduce using rule 117 (bitwise_ops)


State 190

  118 bitwise_ops: '!' .

    $default  reduce using rule 118 (bitwise_ops)


State 191

   91 expression: expression operator . expression

    T_IDENTIFIER  shift, and go to state 144
    T_INTVAL      shift, and go to state 145
    T_FLOATVAL    shift, and go to state 146
    T_BOOLVAL     shift, and go to state 147
    T_STRINGVAL   shift, and go to state 148
    '('           shift, and go to state 149

    value       go to state 150
    expression  go to state 209


State 192

   93 operator: arithmetic_ops .

    $default  reduce using rule 93 (operator)


State 193

   92 boolean_expression: expression relational_ops . expression

    T_IDENTIFIER  shift, and go to state 144
    T_INTVAL      shift, and go to state 145
    T_FLOATVAL    shift, and go to state 146
    T_BOOLVAL     shift, and go to state 147
    T_STRINGVAL   shift, and go to state 148
    '('           shift, and go to state 149

    value       go to state 150
    expression  go to state 210


State 194

   94 operator: boolean_ops .

    $default  reduce using rule 94 (operator)


State 195

   95 operator: bitwise_ops .

    $default  reduce using rule 95 (operator)


State 196

   75 while_statement: T_WHILE '(' boolean_expression ')' . T_DO statements

    T_DO  shift, and go to state 211


State 197

   67 conditional_statement: T_IF '(' boolean_expression ')' . T_THEN execution_body if_then_follow

    T_THEN  shift, and go to state 212


State 198

   79 print_statements: T_WRITELN '(' T_STRINGVAL ')' . ';'

    ';'  shift, and go to state 213


State 199

   76 for_statement: T_FOR T_IDENTIFIER T_ASOP for_list . T_DO statements

    T_DO  shift, and go to state 214


State 200

   77 for_list: expression . T_TO expression
   78         | expression . T_DOWNTO expression
   91 expression: expression . operator expression

    T_TO        shift, and go to state 215
    T_DOWNTO    shift, and go to state 216
    T_BOOL_AND  shift, and go to state 171
    T_BOOL_OR   shift, and go to state 172
    T_BOOL_NOT  shift, and go to state 173
    T_BIT_LS    shift, and go to state 178
    T_BIT_RS    shift, and go to state 179
    '+'         shift, and go to state 180
    '-'         shift, and go to state 181
    '*'         shift, and go to state 182
    '/'         shift, and go to state 183
    '%'         shift, and go to state 184
    '&'         shift, and go to state 187
    '|'         shift, and go to state 188
    '~'         shift, and go to state 189
    '!'         shift, and go to state 190

    operator        go to state 191
    arithmetic_ops  go to state 192
    boolean_ops     go to state 194
    bitwise_ops     go to state 195


State 201

   83 assignment_statement: T_IDENTIFIER @16 assignment_ops expression .
   91 expression: expression . operator expression

    T_BOOL_AND  shift, and go to state 171
    T_BOOL_OR   shift, and go to state 172
    T_BOOL_NOT  shift, and go to state 173
    T_BIT_LS    shift, and go to state 178
    T_BIT_RS    shift, and go to state 179
    '+'         shift, and go to state 180
    '-'         shift, and go to state 181
    '*'         shift, and go to state 182
    '/'         shift, and go to state 183
    '%'         shift, and go to state 184
    '&'         shift, and go to state 187
    '|'         shift, and go to state 188
    '~'         shift, and go to state 189
    '!'         shift, and go to state 190

    $default  reduce using rule 83 (assignment_statement)

    operator        go to state 191
    arithmetic_ops  go to state 192
    boolean_ops     go to state 194
    bitwise_ops     go to state 195


State 202

   30 data_type: T_ARRAY '[' T_INDEXTYPE ']' T_OF . T_DATATYPE

    T_DATATYPE  shift, and go to state 217


State 203

   45 param_list: T_IDENTIFIER ':' T_DATATYPE ';' param_list .

    $default  reduce using rule 45 (param_list)


State 204

   43 procedure_block: T_PROCEDURE T_IDENTIFIER $@10 '(' param_list ')' ';' block ';' .

    $default  reduce using rule 43 (procedure_block)


State 205

   57 more_func_identifiers: ',' T_IDENTIFIER $@15 . more_func_identifiers

    ','  shift, and go to state 140

    $default  reduce using rule 123 (epsilon)

    more_func_identifiers  go to state 218
    epsilon                go to state 142


State 206

   53 function_param_list: T_IDENTIFIER $@13 more_func_identifiers ':' T_DATATYPE . $@14 function_param_continue

    $default  reduce using rule 52 ($@14)

    $@14  go to state 219


State 207

   50 function_block: T_FUNCTION T_IDENTIFIER $@12 '(' function_param_list ')' ':' T_DATATYPE ';' . block ';'

    T_USES  shift, and go to state 7

    $default  reduce using rule 123 (epsilon)

    block       go to state 220
    uses_block  go to state 9
    epsilon     go to state 10


State 208

   90 expression: '(' expression ')' .

    $default  reduce using rule 90 (expression)


State 209

   91 expression: expression . operator expression
   91           | expression operator expression .

    T_BOOL_AND  shift, and go to state 171
    T_BOOL_OR   shift, and go to state 172
    T_BOOL_NOT  shift, and go to state 173
    T_BIT_LS    shift, and go to state 178
    T_BIT_RS    shift, and go to state 179
    '+'         shift, and go to state 180
    '-'         shift, and go to state 181
    '*'         shift, and go to state 182
    '/'         shift, and go to state 183
    '%'         shift, and go to state 184
    '&'         shift, and go to state 187
    '|'         shift, and go to state 188
    '~'         shift, and go to state 189
    '!'         shift, and go to state 190

    T_BOOL_AND  [reduce using rule 91 (expression)]
    T_BOOL_OR   [reduce using rule 91 (expression)]
    T_BOOL_NOT  [reduce using rule 91 (expression)]
    T_BIT_LS    [reduce using rule 91 (expression)]
    T_BIT_RS    [reduce using rule 91 (expression)]
    '+'         [reduce using rule 91 (expression)]
    '-'         [reduce using rule 91 (expression)]
    '*'         [reduce using rule 91 (expression)]
    '/'         [reduce using rule 91 (expression)]
    '%'         [reduce using rule 91 (expression)]
    '&'         [reduce using rule 91 (expression)]
    '|'         [reduce using rule 91 (expression)]
    '~'         [reduce using rule 91 (expression)]
    '!'         [reduce using rule 91 (expression)]
    $default    reduce using rule 91 (expression)

    operator        go to state 191
    arithmetic_ops  go to state 192
    boolean_ops     go to state 194
    bitwise_ops     go to state 195


State 210

   91 expression: expression . operator expression
   92 boolean_expression: expression relational_ops expression .

    T_BOOL_AND  shift, and go to state 171
    T_BOOL_OR   shift, and go to state 172
    T_BOOL_NOT  shift, and go to state 173
    T_BIT_LS    shift, and go to state 178
    T_BIT_RS    shift, and go to state 179
    '+'         shift, and go to state 180
    '-'         shift, and go to state 181
    '*'         shift, and go to state 182
    '/'         shift, and go to state 183
    '%'         shift, and go to state 184
    '&'         shift, and go to state 187
    '|'         shift, and go to state 188
    '~'         shift, and go to state 189
    '!'         shift, and go to state 190

    $default  reduce using rule 92 (boolean_expression)

    operator        go to state 191
    arithmetic_ops  go to state 192
    boolean_ops     go to state 194
    bitwise_ops     go to state 195


State 211

   75 while_statement: T_WHILE '(' boolean_expression ')' T_DO . statements

    T_WHILE       shift, and go to state 100
    T_IF          shift, and go to state 101
    T_WRITELN     shift, and go to state 103
    T_FOR         shift, and go to state 104
    T_IDENTIFIER  shift, and go to state 105

    T_WHILE       [reduce using rule 123 (epsilon)]
    T_IF          [reduce using rule 123 (epsilon)]
    T_WRITELN     [reduce using rule 123 (epsilon)]
    T_FOR         [reduce using rule 123 (epsilon)]
    T_IDENTIFIER  [reduce using rule 123 (epsilon)]
    $default      reduce using rule 123 (epsilon)

    statements             go to state 221
    structured_statements  go to state 107
    conditional_statement  go to state 108
    repetitive_statement   go to state 109
    while_statement        go to state 110
    for_statement          go to state 111
    print_statements       go to state 112
    assignment_statements  go to state 113
    assignment_statement   go to state 114
    epsilon                go to state 115


State 212

   67 conditional_statement: T_IF '(' boolean_expression ')' T_THEN . execution_body if_then_follow

    $default  reduce using rule 123 (epsilon)

    execution_body  go to state 222
    epsilon         go to state 84


State 213

   79 print_statements: T_WRITELN '(' T_STRINGVAL ')' ';' .

    $default  reduce using rule 79 (print_statements)


State 214

   76 for_statement: T_FOR T_IDENTIFIER T_ASOP for_list T_DO . statements

    T_WHILE       shift, and go to state 100
    T_IF          shift, and go to state 101
    T_WRITELN     shift, and go to state 103
    T_FOR         shift, and go to state 104
    T_IDENTIFIER  shift, and go to state 105

    T_WHILE       [reduce using rule 123 (epsilon)]
    T_IF          [reduce using rule 123 (epsilon)]
    T_WRITELN     [reduce using rule 123 (epsilon)]
    T_FOR         [reduce using rule 123 (epsilon)]
    T_IDENTIFIER  [reduce using rule 123 (epsilon)]
    $default      reduce using rule 123 (epsilon)

    statements             go to state 223
    structured_statements  go to state 107
    conditional_statement  go to state 108
    repetitive_statement   go to state 109
    while_statement        go to state 110
    for_statement          go to state 111
    print_statements       go to state 112
    assignment_statements  go to state 113
    assignment_statement   go to state 114
    epsilon                go to state 115


State 215

   77 for_list: expression T_TO . expression

    T_IDENTIFIER  shift, and go to state 144
    T_INTVAL      shift, and go to state 145
    T_FLOATVAL    shift, and go to state 146
    T_BOOLVAL     shift, and go to state 147
    T_STRINGVAL   shift, and go to state 148
    '('           shift, and go to state 149

    value       go to state 150
    expression  go to state 224


State 216

   78 for_list: expression T_DOWNTO . expression

    T_IDENTIFIER  shift, and go to state 144
    T_INTVAL      shift, and go to state 145
    T_FLOATVAL    shift, and go to state 146
    T_BOOLVAL     shift, and go to state 147
    T_STRINGVAL   shift, and go to state 148
    '('           shift, and go to state 149

    value       go to state 150
    expression  go to state 225


State 217

   30 data_type: T_ARRAY '[' T_INDEXTYPE ']' T_OF T_DATATYPE .

    $default  reduce using rule 30 (data_type)


State 218

   57 more_func_identifiers: ',' T_IDENTIFIER $@15 more_func_identifiers .

    $default  reduce using rule 57 (more_func_identifiers)


State 219

   53 function_param_list: T_IDENTIFIER $@13 more_func_identifiers ':' T_DATATYPE $@14 . function_param_continue

    ';'  shift, and go to state 226

    $default  reduce using rule 123 (epsilon)

    function_param_continue  go to state 227
    epsilon                  go to state 228


State 220

   50 function_block: T_FUNCTION T_IDENTIFIER $@12 '(' function_param_list ')' ':' T_DATATYPE ';' block . ';'

    ';'  shift, and go to state 229


State 221

   75 while_statement: T_WHILE '(' boolean_expression ')' T_DO statements .

    $default  reduce using rule 75 (while_statement)


State 222

   60 execution_body: execution_body . statements
   67 conditional_statement: T_IF '(' boolean_expression ')' T_THEN execution_body . if_then_follow

    T_WHILE       shift, and go to state 100
    T_IF          shift, and go to state 101
    T_ELSE        shift, and go to state 230
    T_WRITELN     shift, and go to state 103
    T_FOR         shift, and go to state 104
    T_IDENTIFIER  shift, and go to state 105

    T_WHILE       [reduce using rule 123 (epsilon)]
    T_IF          [reduce using rule 123 (epsilon)]
    T_ELSE        [reduce using rule 123 (epsilon)]
    T_WRITELN     [reduce using rule 123 (epsilon)]
    T_FOR         [reduce using rule 123 (epsilon)]
    T_IDENTIFIER  [reduce using rule 123 (epsilon)]
    $default      reduce using rule 123 (epsilon)

    statements             go to state 106
    structured_statements  go to state 107
    conditional_statement  go to state 108
    if_then_follow         go to state 231
    else_if_block          go to state 232
    else_block             go to state 233
    repetitive_statement   go to state 109
    while_statement        go to state 110
    for_statement          go to state 111
    print_statements       go to state 112
    assignment_statements  go to state 113
    assignment_statement   go to state 114
    epsilon                go to state 234


State 223

   76 for_statement: T_FOR T_IDENTIFIER T_ASOP for_list T_DO statements .

    $default  reduce using rule 76 (for_statement)


State 224

   77 for_list: expression T_TO expression .
   91 expression: expression . operator expression

    T_BOOL_AND  shift, and go to state 171
    T_BOOL_OR   shift, and go to state 172
    T_BOOL_NOT  shift, and go to state 173
    T_BIT_LS    shift, and go to state 178
    T_BIT_RS    shift, and go to state 179
    '+'         shift, and go to state 180
    '-'         shift, and go to state 181
    '*'         shift, and go to state 182
    '/'         shift, and go to state 183
    '%'         shift, and go to state 184
    '&'         shift, and go to state 187
    '|'         shift, and go to state 188
    '~'         shift, and go to state 189
    '!'         shift, and go to state 190

    $default  reduce using rule 77 (for_list)

    operator        go to state 191
    arithmetic_ops  go to state 192
    boolean_ops     go to state 194
    bitwise_ops     go to state 195


State 225

   78 for_list: expression T_DOWNTO expression .
   91 expression: expression . operator expression

    T_BOOL_AND  shift, and go to state 171
    T_BOOL_OR   shift, and go to state 172
    T_BOOL_NOT  shift, and go to state 173
    T_BIT_LS    shift, and go to state 178
    T_BIT_RS    shift, and go to state 179
    '+'         shift, and go to state 180
    '-'         shift, and go to state 181
    '*'         shift, and go to state 182
    '/'         shift, and go to state 183
    '%'         shift, and go to state 184
    '&'         shift, and go to state 187
    '|'         shift, and go to state 188
    '~'         shift, and go to state 189
    '!'         shift, and go to state 190

    $default  reduce using rule 78 (for_list)

    operator        go to state 191
    arithmetic_ops  go to state 192
    boolean_ops     go to state 194
    bitwise_ops     go to state 195


State 226

   55 function_param_continue: ';' . function_param_list

    T_IDENTIFIER  shift, and go to state 98

    function_param_list  go to state 235


State 227

   53 function_param_list: T_IDENTIFIER $@13 more_func_identifiers ':' T_DATATYPE $@14 function_param_continue .

    $default  reduce using rule 53 (function_param_list)


State 228

   54 function_param_continue: epsilon .

    $default  reduce using rule 54 (function_param_continue)


State 229

   50 function_block: T_FUNCTION T_IDENTIFIER $@12 '(' function_param_list ')' ':' T_DATATYPE ';' block ';' .

    $default  reduce using rule 50 (function_block)


State 230

   71 else_if_block: T_ELSE . conditional_statement
   72 else_block: T_ELSE . execution_body

    T_IF  shift, and go to state 101

    T_IF      [reduce using rule 123 (epsilon)]
    $default  reduce using rule 123 (epsilon)

    execution_body         go to state 236
    conditional_statement  go to state 237
    epsilon                go to state 84


State 231

   67 conditional_statement: T_IF '(' boolean_expression ')' T_THEN execution_body if_then_follow .

    $default  reduce using rule 67 (conditional_statement)


State 232

   68 if_then_follow: else_if_block .

    $default  reduce using rule 68 (if_then_follow)


State 233

   69 if_then_follow: else_block .

    $default  reduce using rule 69 (if_then_follow)


State 234

   70 if_then_follow: epsilon .
   81 assignment_statements: epsilon .

    T_WHILE       reduce using rule 70 (if_then_follow)
    T_WHILE       [reduce using rule 81 (assignment_statements)]
    T_IF          reduce using rule 70 (if_then_follow)
    T_IF          [reduce using rule 81 (assignment_statements)]
    T_ELSE        reduce using rule 70 (if_then_follow)
    T_ELSE        [reduce using rule 81 (assignment_statements)]
    T_END         reduce using rule 70 (if_then_follow)
    T_END         [reduce using rule 81 (assignment_statements)]
    T_WRITELN     reduce using rule 70 (if_then_follow)
    T_WRITELN     [reduce using rule 81 (assignment_statements)]
    T_FOR         reduce using rule 70 (if_then_follow)
    T_FOR         [reduce using rule 81 (assignment_statements)]
    T_IDENTIFIER  reduce using rule 70 (if_then_follow)
    T_IDENTIFIER  [reduce using rule 81 (assignment_statements)]
    $default      reduce using rule 70 (if_then_follow)


State 235

   55 function_param_continue: ';' function_param_list .

    $default  reduce using rule 55 (function_param_continue)


State 236

   60 execution_body: execution_body . statements
   72 else_block: T_ELSE execution_body .

    T_WHILE       shift, and go to state 100
    T_IF          shift, and go to state 101
    T_WRITELN     shift, and go to state 103
    T_FOR         shift, and go to state 104
    T_IDENTIFIER  shift, and go to state 105

    T_WHILE       [reduce using rule 72 (else_block)]
    T_WHILE       [reduce using rule 123 (epsilon)]
    T_IF          [reduce using rule 72 (else_block)]
    T_IF          [reduce using rule 123 (epsilon)]
    T_ELSE        reduce using rule 72 (else_block)
    T_ELSE        [reduce using rule 123 (epsilon)]
    T_END         reduce using rule 72 (else_block)
    T_END         [reduce using rule 123 (epsilon)]
    T_WRITELN     [reduce using rule 72 (else_block)]
    T_WRITELN     [reduce using rule 123 (epsilon)]
    T_FOR         [reduce using rule 72 (else_block)]
    T_FOR         [reduce using rule 123 (epsilon)]
    T_IDENTIFIER  [reduce using rule 72 (else_block)]
    T_IDENTIFIER  [reduce using rule 123 (epsilon)]
    $default      reduce using rule 72 (else_block)

    statements             go to state 106
    structured_statements  go to state 107
    conditional_statement  go to state 108
    repetitive_statement   go to state 109
    while_statement        go to state 110
    for_statement          go to state 111
    print_statements       go to state 112
    assignment_statements  go to state 113
    assignment_statement   go to state 114
    epsilon                go to state 115


State 237

   71 else_if_block: T_ELSE conditional_statement .

    $default  reduce using rule 71 (else_if_block)
